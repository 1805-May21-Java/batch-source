-- SECTION 2.1 SELECT
-- Select all records from the Employee table.
SELECT *
FROM CHINOOK.EMPLOYEE;

-- Select all records from the Employee table where last name is King.
SELECT *
FROM CHINOOK.EMPLOYEE
WHERE LASTNAME = 'King';

-- Select all records from the Employee table where first name is Andrew 
--      and REPORTSTO is NULL.
SELECT *
FROM CHINOOK.EMPLOYEE
WHERE FIRSTNAME = 'Andrew'
    AND REPORTSTO IS NULL;
    
-- SECTION 2.2 ORDER BY
-- Select all albums in Album table and sort result set in descending 
--      order by title.
SELECT *
FROM CHINOOK.ALBUM
ORDER BY TITLE DESC;

-- Select first name from Customer and sort result set in ascending 
--      order by city.
SELECT FIRSTNAME
FROM CHINOOK.CUSTOMER
ORDER BY CITY ASC;

-- SECTION 2.3 INSERT INTO
-- Insert two new records into Genre table.
INSERT INTO CHINOOK.GENRE
VALUES (26, 'Bluegrass');
INSERT INTO CHINOOK.GENRE
VALUES (27, 'Folk');

-- Insert two new records into Employee table.
INSERT INTO CHINOOK.EMPLOYEE
VALUES (9, 'Folkster', 'Gustav', 'IT Staff', 6, DATE '1990-09-24', DATE '2014-07-07', '1809 Broad Blvd', 'Ashford', 'NC', 'United States', '37215', NULL, NULL, NULL);
INSERT INTO CHINOOK.EMPLOYEE 
VALUES (10, 'Shimmle', 'Snorklo', 'IT Staff', 6, DATE '1986-03-04', DATE '2011-02-19', '8533 Max St', 'Charleston', 'SC', 'United States', '63235', NULL, NULL, NULL);

-- Insert two new records into Customer table. 
INSERT INTO CHINOOK.CUSTOMER 
(CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL) 
VALUES (60, 'Cris', 'Pretswell', 'Bubbletube', '5377 Eliot Alley', 'Malaga', 'Andalucia', 'Spain', '29015', '286-145-8493', '599-209-3782', 'cpretswell1@wordpress.org');
INSERT INTO CHINOOK.CUSTOMER 
(CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL)
VALUES (61, 'Carey', 'Kornacki', 'Voonder', '64120 Melody Pass', 'Timiryazevskoye', null, 'Russia', '634510', '257-206-3722', '877-943-9516', 'ckornacki0@biblegateway.com');

-- SECTION 2.4 UPDATE
-- Update Aaron Mitchel into Customer table to Robert Walter.
UPDATE CHINOOK.CUSTOMER
SET FIRSTNAME = 'Robert', LASTNAME = 'Walter'
WHERE FIRSTNAME = 'Aaron' AND LASTNAME = 'Mitchell';

-- Update name of artist in the Artist table "Creedence Clearwater Revival" to 
--      "CCR"
UPDATE CHINOOK.ARTIST
SET NAME = 'CCR'
WHERE NAME = 'Creedence Clearwater Revival';

-- SECTION 2.5 lIKE
-- Select all invoices with a billing address like "T%".
SELECT *
FROM INVOICE
WHERE 
    BILLINGADDRESS LIKE 'T%';

-- SECTION 2.6 BETWEEN
-- Select all invoices that have a total between 15 and 50.
SELECT *
FROM INVOICE
WHERE 
    TOTAL BETWEEN 15 AND 50;
    
-- Select all employees hired between 1st of June 2003 and 1st of March 2004.
SELECT *
FROM EMPLOYEE
WHERE
    HIREDATE BETWEEN DATE '2003-06-01' AND DATE '2004-03-01';

-- SECTION 2.7 DELETE
-- Delete a record in Customer table where the name is Rovert Walter
--      (There may be constraints that rely on this, find out how
--      to resolve them).
ALTER TABLE CHINOOK.INVOICE
DROP CONSTRAINT FK_INVOICECUSTOMERID;

ALTER TABLE CHINOOK.INVOICE
ADD CONSTRAINT FK_INVOICECUSTOMERID
FOREIGN KEY (CUSTOMERID)
REFERENCES CHINOOK.CUSTOMER(CUSTOMERID) 
ON DELETE CASCADE;

ALTER TABLE CHINOOK.INVOICELINE
DROP CONSTRAINT FK_INVOICELINEINVOICEID;

ALTER TABLE CHINOOK.INVOICELINE
ADD CONSTRAINT FK_INVOICELINEINVOICEID
FOREIGN KEY (INVOICEID)
REFERENCES CHINOOK.INVOICE(INVOICEID)
ON DELETE CASCADE;
            
DELETE
FROM CHINOOK.CUSTOMER
WHERE 
    FIRSTNAME = 'Robert' 
    AND LASTNAME = 'Walter';

-- SECTION 3.1 SYSTEM DEFINED FUNCTIONS
-- Create a function that returns the current time.
CREATE OR REPLACE FUNCTION GETCURRENTTIME
RETURN TIMESTAMP
AS
CURRENTTIME TIMESTAMP;
BEGIN
    SELECT CURRENT_TIMESTAMP INTO CURRENTTIME FROM DUAL;
    RETURN CURRENTTIME;
END;

-- TEST IT
BEGIN
    DBMS_OUTPUT.PUT_LINE(GETCURRENTTIME());
END;

-- Create a function that returns the length of name in MEDIATYPE table.
CREATE OR REPLACE FUNCTION LENGTHOFNAME
RETURN NUMBER
AS
NUMBEROFNAMES NUMBER;
BEGIN
    SELECT COUNT(NAME) INTO NUMBEROFNAMES FROM CHINOOK.MEDIATYPE;
    RETURN NUMBEROFNAMES;
END;

-- TEST IT
BEGIN
    DBMS_OUTPUT.PUT_LINE(LENGTHOFNAME());
END;

-- SECTION 3.2 SYSTEM DEFINED AGGREGATE FUNCTIONS
-- Create a function that returns the average total of all invoices
CREATE OR REPLACE FUNCTION AVERAGEOFINVOICES
RETURN NUMBER
AS
AVERAGE NUMBER;
BEGIN
    SELECT AVG(TOTAL) INTO AVERAGE FROM CHINOOK.INVOICE;
    RETURN AVERAGE;
END;

-- TEST IT
BEGIN
    DBMS_OUTPUT.PUT_LINE(AVERAGEOFINVOICES);
END;

-- Create a function that returns the most expensive track
CREATE OR REPLACE FUNCTION MOSTEXPENSIVETRACK
RETURN CHINOOK.TRACK.UNITPRICE%TYPE
AS
HIGHEST CHINOOK.TRACK.UNITPRICE%TYPE;
BEGIN
    SELECT MAX(UNITPRICE) INTO HIGHEST FROM CHINOOK.TRACK;
    RETURN HIGHEST;
END;

-- TEST IT
BEGIN
    DBMS_OUTPUT.PUT_LINE(MOSTEXPENSIVETRACK);
END;

-- SECTION 3.3 USER DEFINED SCALAR FUNCTIONS
-- Create a function that returns the average price of 
--      invoiceline items in the invoiceline table.
CREATE OR REPLACE FUNCTION AVGPRICEINVOICELINE
RETURN CHINOOK.INVOICELINE.UNITPRICE%TYPE
AS
AVERAGE CHINOOK.INVOICELINE.UNITPRICE%TYPE;
BEGIN
    SELECT AVG(UNITPRICE) INTO AVERAGE FROM CHINOOK.INVOICELINE;
    RETURN AVERAGE;
END;

-- TEST IT
BEGIN
    DBMS_OUTPUT.PUT_LINE(AVGPRICEINVOICELINE);
END;

-- SECTION 3.4 USER DEFINED TABLE VALUED FUNCTIONS
-- Create a function that returns all employees who are born after 1968.
CREATE OR REPLACE FUNCTION GETALLEMPAFTER1968
RETURN SYS_REFCURSOR
AS
RETCURSOR SYS_REFCURSOR;
AFTERDATE DATE;
BEGIN
    AFTERDATE := TO_DATE('1968-12-31', 'YYYY-mm-dd');
    OPEN RETCURSOR FOR 
        SELECT FIRSTNAME, LASTNAME, BIRTHDATE 
        FROM CHINOOK.EMPLOYEE 
        WHERE BIRTHDATE > AFTERDATE;
    RETURN RETCURSOR;
END;

-- TEST IT
DECLARE
    SVAR SYS_REFCURSOR;
    EMPFIRST CHINOOK.EMPLOYEE.FIRSTNAME%TYPE;
    EMPLAST CHINOOK.EMPLOYEE.LASTNAME%TYPE;
    EMPDATE CHINOOK.EMPLOYEE.BIRTHDATE%TYPE;
BEGIN
    SVAR := GETALLEMPAFTER1968;
    LOOP
        FETCH SVAR INTO EMPFIRST, EMPLAST, EMPDATE;
        EXIT WHEN SVAR%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(EMPFIRST||' '||EMPLAST||' '||EMPDATE);
    END LOOP;
    CLOSE SVAR;
END;

-- SECTION 4 STORED PROCEDURES
-- SECTION 4.1 BASIC STORED PROCEDURE
-- Create a stored procedure that selects the first and last names 
--      of all the employees.
CREATE OR REPLACE PROCEDURE GETFIRSTANDLASTNAMES (S OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN S FOR
        SELECT FIRSTNAME, LASTNAME 
        FROM CHINOOK.EMPLOYEE;
END;

-- TEST IT
DECLARE
    SVAR SYS_REFCURSOR;
    FNAME CHINOOK.EMPLOYEE.FIRSTNAME%TYPE;
    LNAME CHINOOK.EMPLOYEE.LASTNAME%TYPE;
BEGIN
    GETFIRSTANDLASTNAMES(SVAR);
    LOOP
        FETCH SVAR INTO FNAME, LNAME;
        EXIT WHEN SVAR%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(FNAME||' '||LNAME);
    END LOOP;
    CLOSE SVAR;
END;

-- SECTION 4.2 STORED PROCEDURE INPUT PARAMETERS
-- Create a stored procedure that updates the personal information 
--      of an employee.
CREATE OR REPLACE PROCEDURE CHINOOK.UPDATEEMPLOYEEPERSONAL (
    EID IN CHINOOK.EMPLOYEE.EMPLOYEEID%TYPE,
    AD IN CHINOOK.EMPLOYEE.ADDRESS%TYPE,
    CI IN CHINOOK.EMPLOYEE.CITY%TYPE,
    ST IN CHINOOK.EMPLOYEE.STATE%TYPE,
    CO IN CHINOOK.EMPLOYEE.COUNTRY%TYPE,
    PO IN CHINOOK.EMPLOYEE.POSTALCODE%TYPE,
    PH IN CHINOOK.EMPLOYEE.PHONE%TYPE,
    FA IN CHINOOK.EMPLOYEE.FAX%TYPE,
    EM IN CHINOOK.EMPLOYEE.EMAIL%TYPE)
AS
BEGIN
    UPDATE CHINOOK.EMPLOYEE
    SET 
        ADDRESS = AD,
        CITY = CI,
        STATE = ST,
        COUNTRY = CO,
        POSTALCODE = PO,
        PHONE = PH,
        FAX = FA,
        EMAIL = EM
    WHERE EMPLOYEEID = EID;
END;
/
-- TEST IT
BEGIN
    CHINOOK.UPDATEEMPLOYEEPERSONAL(2, '35 SPICY AVE', 'NORTH STARSKY', 'OK',
    'United States', '31067', '19284628', '13748298', 'EMAILTHING@PUBLIC.COM');
END;
/
SELECT * FROM CHINOOK.EMPLOYEE WHERE EMPLOYEEID = 2;

-- Create a stored procedure that returns the managers of an employee.
CREATE OR REPLACE PROCEDURE GETMANAGERS(
    EMP IN CHINOOK.EMPLOYEE.EMPLOYEEID%TYPE, S OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN S FOR 
        SELECT EMPLOYEEID, FIRSTNAME, LASTNAME
        FROM CHINOOK.EMPLOYEE
        WHERE EMPLOYEEID = 
            (SELECT REPORTSTO 
            FROM CHINOOK.EMPLOYEE
            WHERE EMPLOYEEID = EMP);
END;
/
-- TEST IT
DECLARE
SVAR SYS_REFCURSOR;
MANID CHINOOK.EMPLOYEE.EMPLOYEEID%TYPE;
FNAME CHINOOK.EMPLOYEE.FIRSTNAME%TYPE;
LNAME CHINOOK.EMPLOYEE.LASTNAME%TYPE;
BEGIN
    GETMANAGERS(8, SVAR);
    LOOP
        FETCH SVAR INTO MANID, FNAME, LNAME;
        EXIT WHEN SVAR%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(FNAME||' '||LNAME||' '||MANID);
    END LOOP;
    CLOSE SVAR;
END;
/

-- SECTION 4.3 STOED PROCEDURE OUTPUTPARAMETERS
-- Create a stored procedure that returns the name and company of a customer.
CREATE OR REPLACE PROCEDURE GETNAMEANDCOMPANY(
    CID IN CHINOOK.CUSTOMER.CUSTOMERID%TYPE, 
    FNAME OUT CHINOOK.CUSTOMER.FIRSTNAME%TYPE,
    LNAME OUT CHINOOK.CUSTOMER.LASTNAME%TYPE,
    CCOMPANY OUT CHINOOK.CUSTOMER.COMPANY%TYPE)
AS
BEGIN
    SELECT FIRSTNAME, LASTNAME, COMPANY 
    INTO FNAME, LNAME, CCOMPANY
    FROM CHINOOK.CUSTOMER
    WHERE CUSTOMERID = CID;
END;
/

-- TEST IT
DECLARE
CID CHINOOK.CUSTOMER.CUSTOMERID%TYPE;
FNAME CHINOOK.CUSTOMER.FIRSTNAME%TYPE;
LNAME CHINOOK.CUSTOMER.LASTNAME%TYPE;
CCOMP CHINOOK.CUSTOMER.COMPANY%TYPE;
BEGIN
    CID := 11;
    GETNAMEANDCOMPANY(CID, FNAME, LNAME, CCOMP);
    DBMS_OUTPUT.PUT_LINE(CID||' '||FNAME||' '||LNAME||' '||CCOMP);
END;

/
-- SECTION 5.0 TRANSACTIONS
-- Create a transaction that given an invoiceId will delete that invoice.
--      There may be constraints that rely on this, find out how to 
--      resolve them.
CREATE OR REPLACE PROCEDURE CHINOOK.DELETEINVOICE(
    INID IN CHINOOK.INVOICE.INVOICEID%TYPE)
AS
BEGIN
    DELETE FROM CHINOOK.INVOICE
    WHERE INVOICEID = INID;
END;
/

-- TEST IT
BEGIN
    CHINOOK.DELETEINVOICE(3);
END;
/

-- Create a transaction nested within a stored procedure that inserts a 
--      new record in the Customer table.
CREATE OR REPLACE PROCEDURE CHINOOK.ADDBILL
AS
BEGIN
    INSERT INTO CHINOOK.CUSTOMER
    (CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL)
    VALUES
        (63, 'BILL', 'KERMAN', 'BKERMAN@SPACE.GOV');
END;
/

-- TEST IT
BEGIN
    CHINOOK.ADDBILL;
END;
/

-- SECTION 6 TRIGGERS
-- SECTION 6.1 AFTER/FOR
-- Create an after insert triggeron the employee table fired after a new record
--      is inserted into the table.
CREATE OR REPLACE TRIGGER TR_INSERT_EMPLOYEE
AFTER INSERT ON CHINOOK.EMPLOYEE
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('NEW INSERTION MADE TO EMPLOYEE');
END;
/

-- TEST IT

-- DELETE FROM CHINOOK.EMPLOYEE
-- WHERE FIRSTNAME = 'SNAXIFER';

BEGIN
    INSERT INTO CHINOOK.EMPLOYEE
    (EMPLOYEEID, FIRSTNAME, LASTNAME)
    VALUES
        (12, 'SNAXIFER', 'MOTLEY');
END;
/

--  Create an after update trigger on the album table that fires after a row
--      is inserted in the table.
CREATE OR REPLACE TRIGGER TR_UPDATE_ALBUM
AFTER UPDATE ON CHINOOK.ALBUM
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('NEW UPDATE MADE TO ALBUM');
END;
/

-- TEST IT
BEGIN
    UPDATE CHINOOK.ALBUM
    SET ARTISTID = 1
    WHERE ALBUMID = 1;
END;
/

-- Create an after delete trigger on the customer table that fires after a row
--      is deleted from the table.
CREATE OR REPLACE TRIGGER TR_DELETE_CUSTOMER
AFTER DELETE ON CHINOOK.CUSTOMER
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('NEW DELETION MADE ON CUSTOMER');
END;
/

-- TEST IT
BEGIN
    DELETE 
    FROM CHINOOK.CUSTOMER
    WHERE LASTNAME = 'KERMAN';
END;
/

-- SECTION 7 JOINS
-- SECTION 7.1 INNER
-- Create an inner join that joins customers and orders and specifies the name
--      of the customer and invoiceId.
SELECT CUST.FIRSTNAME, CUST.LASTNAME, INV.INVOICEID
FROM 
    CHINOOK.CUSTOMER CUST
    INNER JOIN
    CHINOOK.INVOICE INV
    ON CUST.CUSTOMERID = INV.CUSTOMERID;

-- SECTION 7.2 OUTER
-- Create an outer join that joins the customer and invoice table, specifying
--      the CustomerId, firstname, lastname, invoiceId, and total.
SELECT CUST.CUSTOMERID, CUST.FIRSTNAME, CUST.LASTNAME, INV.INVOICEID, INV.TOTAL
FROM 
    CHINOOK.CUSTOMER CUST
    FULL OUTER JOIN
    CHINOOK.INVOICE INV
    ON CUST.CUSTOMERID = INV.CUSTOMERID;

-- SECTION 7.3 RIGHT
-- Create a right join that joins album and artist specifying artist 
--      name and title.
SELECT AR.NAME, AL.TITLE
FROM 
    CHINOOK.ALBUM AL
    RIGHT JOIN
    CHINOOK.ARTIST AR
    ON AL.ARTISTID = AR.ARTISTID;

-- SECTION 7.4 CROSS
-- Create a cross join that joins album and artist and sorts by artist name
--      in ascending order.
SELECT *
FROM
    CHINOOK.ALBUM AL
    CROSS JOIN
    CHINOOK.ARTIST AR
ORDER BY 
    AR.NAME
ASC;

-- SECTION 7.5 SELF
-- Perform a self-join on the employee table, joining on the reportsto column.
SELECT *
FROM 
    CHINOOK.EMPLOYEE E
    JOIN
    CHINOOK.EMPLOYEE M
    ON E.REPORTSTO = M.EMPLOYEEID;
    