
--2.1 SELECT STATEMENTS
SELECT * 
FROM CHINOOK.EMPLOYEE;

SELECT *
FROM CHINOOK.EMPLOYEE
WHERE CHINOOK.EMPLOYEE.LASTNAME = 'King';


SELECT * 
FROM CHINOOK.EMPLOYEE
WHERE CHINOOK.EMPLOYEE.FIRSTNAME = 'Andrew' AND CHINOOK.EMPLOYEE.REPORTSTO IS NULL;

SELECT *
FROM CHINOOK.ALBUM
ORDER BY CHINOOK.ALBUM.TITLE DESC;

SELECT FIRSTNAME
FROM CHINOOK.CUSTOMER
ORDER BY CHINOOK.CUSTOMER.CITY;

INSERT INTO CHINOOK.GENRE VALUES(26, 'Bluegrass');
INSERT INTO CHINOOK.GENRE VALUES(27, 'AFRICAN HEAVY METAL');

INSERT INTO  CHINOOK.EMPLOYEE VALUES  (9,'Vanyushkin', 'Almeda', 'Desktop Support Technician', 1, DATE '1974-09-07', DATE '2014-02-13', '54498 Buell Pass', 'Omaha', 'NE', 'United States', '68144', '+1 (402) 490-7984', '+1 (608) 506-4803', 'avanyushkin0@google.ca');
INSERT INTO  CHINOOK.EMPLOYEE VALUES (10,'Savin', 'Gunar', 'Structural Engineer', 2,DATE '1974-11-20', DATE '2009-01-05', '4327 Knutson Lane', 'Valley Forge', 'PA', 'United States', '19495', '+1 (484) 299-5980', '+1 (719) 402-6403', 'gsavin1@tripod.com');

INSERT INTO CHINOOK.CUSTOMER VALUES(60,'Dolli', 'Bourdas', 'Oyoyo', '44276 Texas Point', 'Reno', 'NV', 'United States', '89505', '+1 (775) 357-4505', '+1 (714) 410-9143', 'dbourdas0@wikia.com', 3);
INSERT INTO CHINOOK.CUSTOMER VALUES(61,'Sonni', 'De Bruijne', 'Browsezoom', '73607 Glacier Hill Lane', 'Baltimore', 'MD', 'United States', '21282', '+1 (410) 768-7201', '+1 (254) 187-5901', 'sdebruijne1@bigcartel.com', 3);

UPDATE CHINOOK.CUSTOMER
SET CHINOOK.CUSTOMER.FIRSTNAME = 'Robert', CHINOOK.CUSTOMER.LASTNAME = 'Walter'
WHERE CHINOOK.CUSTOMER.FIRSTNAME = 'Robert'
AND CHINOOK.CUSTOMER.LASTNAME = 'Whitaker';

UPDATE CHINOOK.ARTIST
SET CHINOOK.ARTIST.NAME = 'CCR'
WHERE CHINOOK.ARTIST.NAME = 'Creedence Clearwater Revival';

SELECT *
FROM CHINOOK.INVOICE
WHERE CHINOOK.INVOICE.BILLINGADDRESS LIKE 'T%';

SELECT *
FROM CHINOOK.INVOICE
WHERE TOTAL BETWEEN 15 AND 20;

SELECT *
FROM CHINOOK.EMPLOYEE
WHERE HIREDATE BETWEEN DATE '2003-06-01' AND DATE '2004-03-01';

ALTER TABLE CHINOOK.CUSTOMER
DROP CONSTRAINT FK_CUSTOMERSUPPORTREPID;

DELETE FROM CHINOOK.CUSTOMER
WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter';

--CREATE A FUNCTION THAT RETURNS THE CURRENT TIME.
CREATE OR REPLACE FUNCTION GET_TIME
RETURN VARCHAR2
IS
BEGIN
    RETURN TO_CHAR(LOCALTIMESTAMP, 'HH:MI:SS PM');    
END;
/

--CREATE A FUNCTION THAT RETURNS THE LENGTH OF name IN MEDIATYPE TABLE
CREATE OR REPLACE FUNCTION GET_LENGTH(X IN NUMBER)
RETURN NUMBER
IS
NAME_LENGTH NUMBER(4);
BEGIN
    SELECT LENGTH(NAME)
    INTO NAME_LENGTH
    FROM CHINOOK.MEDIATYPE
    WHERE MEDIATYPEID = X;
    RETURN NAME_LENGTH;
END;
/

--CREATE A FUNCTION THAT RETURNS THE AVERAGE TOTAL OF ALL INVOICES
CREATE OR REPLACE FUNCTION GET_AVG_TOTAL
RETURN NUMBER
IS
AVERAGE DECIMAL(5,2);
BEGIN
    SELECT AVG(TOTAL)
    INTO AVERAGE 
    FROM CHINOOK.INVOICE;
    RETURN AVERAGE;
END;
/

--CREATE A FUNCTION THAT RETURNS THE MOST EXPENSIVE TRACK
CREATE OR REPLACE FUNCTION GET_HIGHEST_TRACK
RETURN VARCHAR2
IS
MAX_PRICE DECIMAL(5,2);
MAX_NAME VARCHAR2(50);
BEGIN
    SELECT MAX(UNITPRICE)
    INTO MAX_PRICE
    FROM CHINOOK.TRACK;
    
    SELECT NAME 
    INTO MAX_NAME
    FROM CHINOOK.TRACK
    WHERE TRACKID IN (SELECT MIN(TRACKID)
                      FROM CHINOOK.TRACK
                      WHERE UNITPRICE = MAX_PRICE);
    RETURN MAX_NAME;                  
END;
/


--CREATE A FUNCTION THAT RETURNS THE AVERAGE PRICE OF INVOICELINE ITEMS IN THE INCOIVELINE TABLE
CREATE OR REPLACE FUNCTION GET_AVG_PRICE
RETURN NUMBER
IS
AVERAGE DECIMAL(5,2);
BEGIN
    SELECT AVG(UNITPRICE)
    INTO AVERAGE
    FROM CHINOOK.INVOICELINE;
    RETURN AVERAGE;
END;
/

--CREATE A FUNCTION THAT RETURNS ALL EMPLOYEES WHO ARE BORN AFTER 1968
CREATE OR REPLACE FUNCTION GET_AFTER_1968
RETURN SYS_REFCURSOR
IS
PEOPLE SYS_REFCURSOR;
BEGIN
    OPEN PEOPLE 
    FOR SELECT FIRSTNAME,LASTNAME
    FROM CHINOOK.EMPLOYEE
    WHERE BIRTHDATE > '31-DEC-68';
    RETURN PEOPLE;
END;
/

SELECT GET_AFTER_1968 FROM DUAL;

DECLARE
PEOPLE SYS_REFCURSOR;
FIRSTNAME VARCHAR2(20);
LASTNAME VARCHAR2(20);
BEGIN
    PEOPLE := GET_AFTER_1968();
    LOOP
        FETCH PEOPLE INTO FIRSTNAME, LASTNAME;
        EXIT WHEN PEOPLE%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(FIRSTNAME || ' ' || LASTNAME);
    END LOOP;    
END;
/

--CREATE A PROCEDURE THAT SELECTS THE FIRST AND LAST NAMES OF ALL THE EMPLOYEES
CREATE OR REPLACE PROCEDURE GET_NAMES(S OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN S FOR 
    SELECT FIRSTNAME, LASTNAME
    FROM CHINOOK.EMPLOYEE;
END;
/

--CREATE A STORED PROCEDURE THAT UPDATES THE PERSONAL INFORMATION OF AN EMPLOYEE
CREATE OR REPLACE PROCEDURE CHINOOK.INFO_UPDATE(
EMP_ID IN CHINOOK.EMPLOYEE.EMPLOYEEID%TYPE,
EMP_ADDRESS IN CHINOOK.EMPLOYEE.ADDRESS%TYPE,
EMP_CITY IN CHINOOK.EMPLOYEE.CITY%TYPE,
EMP_STATE IN CHINOOK.EMPLOYEE.STATE%TYPE,
EMP_COUNTRY IN CHINOOK.EMPLOYEE.COUNTRY%TYPE,
EMP_POSTAL IN CHINOOK.EMPLOYEE.POSTALCODE%TYPE,
EMP_NUM IN CHINOOK.EMPLOYEE.PHONE%TYPE,
EMP_FAX IN CHINOOK.EMPLOYEE.FAX%TYPE,
EMP_EMAIL IN CHINOOK.EMPLOYEE.EMAIL%TYPE
)
 IS
  BEGIN
    UPDATE CHINOOK.EMPLOYEE SET
      CHINOOK.EMPLOYEE.EMPLOYEEID = EMP_ID,
        ADDRESS = EMP_ADDRESS,
        CITY = EMP_CITY,
        STATE = EMP_STATE,
        COUNTRY = EMP_COUNTRY,
        POSTALCODE = EMP_POSTAL,
        PHONE = EMP_NUM,
        FAX = EMP_FAX,
        EMAIL = EMP_EMAIL
        WHERE EMPLOYEEID = EMP_ID;
  END;
/

--CREATE A STORED PROCEDURE THAT RETURNS THE MANAGERS OF AN EMPLOYEE
CREATE OR REPLACE PROCEDURE GET_MANAGERS(
EMP_ID IN CHINOOK.EMPLOYEE.EMPLOYEEID%TYPE,
S OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN S FOR
        SELECT EMPLOYEEID, FIRSTNAME, LASTNAME
        FROM CHINOOK.EMPLOYEE
        WHERE EMPLOYEEID = (SELECT REPORTSTO
                            FROM CHINOOK.EMPLOYEE
                            WHERE EMPLOYEEID = EMP_ID);
END;
/

--CREATE A STORED PROCEDURE THAT RETURNS THE NAME AND COMPANY OF A CUSTOMER
CREATE OR REPLACE PROCEDURE GET_NAME_AND_COMPANY(
CUST_ID IN CHINOOK.CUSTOMER.CUSTOMERID%TYPE,
CUST_FIRSTNAME OUT CHINOOK.CUSTOMER.FIRSTNAME%TYPE,
CUST_LASTNAME OUT CHINOOK.CUSTOMER.LASTNAME%TYPE,
CUST_COMPANY OUT CHINOOK.CUSTOMER.COMPANY%TYPE)
AS
BEGIN
    SELECT FIRSTNAME, LASTNAME, COMPANY
    INTO CUST_FIRSTNAME, CUST_LASTNAME, CUST_COMPANY
    FROM CHINOOK.CUSTOMER
    WHERE CUSTOMERID = CUST_ID;
END;
/

--CREATE A TRANSACTION THAT GIVEN A INVOICEID WILL DELETE THAT INVOICE
CREATE OR REPLACE PROCEDURE CHINOOK.DELETE_INVOICE(
INVOICE_ID IN CHINOOK.INVOICE.INVOICEID%TYPE)
AS
BEGIN
    DELETE FROM CHINOOK.INVOICE
    WHERE INVOICEID = INVOICE_ID;
END;
/

--CREATE A TRANSACTION NESTED WITHIN A STORED PROCEDURE THAT INSERTS A NEW RECORD IN THE CUSTOMER TABLE
CREATE OR REPLACE PROCEDURE CHINOOK.NEW_CUSTOMER(
CUST_ID IN CHINOOK.CUSTOMER.CUSTOMERID%TYPE,
CUST_FIRST IN CHINOOK.CUSTOMER.FIRSTNAME%TYPE,
CUST_LAST IN CHINOOK.CUSTOMER.LASTNAME%TYPE,
CUST_COMPANY IN CHINOOK.CUSTOMER.COMPANY%TYPE,
CUST_ADDRESS IN CHINOOK.CUSTOMER.ADDRESS%TYPE,
CUST_CITY IN CHINOOK.CUSTOMER.CITY%TYPE,
CUST_STATE IN CHINOOK.CUSTOMER.STATE%TYPE,
CUST_COUNTRY IN CHINOOK.CUSTOMER.COUNTRY%TYPE,
CUST_POSTAL IN CHINOOK.CUSTOMER.POSTALCODE%TYPE,
CUST_NUM IN CHINOOK.CUSTOMER.PHONE%TYPE,
CUST_FAX IN CHINOOK.CUSTOMER.FAX%TYPE,
CUST_EMAIL IN CHINOOK.CUSTOMER.EMAIL%TYPE,
CUST_REPID IN CHINOOK.CUSTOMER.SUPPORTREPID%TYPE)
IS
BEGIN
    SET TRANSACTION NAME 'CUSTOMER_CREATE';
    SAVEPOINT PRE_CREATE;
    INSERT INTO CHINOOK.CUSTOMER
    VALUES (CUST_ID, CUST_FIRST, CUST_LAST, CUST_COMPANY, CUST_ADDRESS, CUST_CITY,
            CUST_STATE, CUST_COUNTRY, CUST_POSTAL, CUST_NUM, CUST_FAX, CUST_EMAIL, CUST_REPID);
            COMMIT;
END;
/

--CREATE AN AFTER INSERT TRIGGER ON THE EMPLOYEE TABLE FIRED AFTER A NEW RECORD IS INSERTED INTO THE TABLE
CREATE OR REPLACE TRIGGER TR_EMPLOYEE_INSERT
AFTER INSERT ON CHINOOK.EMPLOYEE
FOR EACH ROW 
BEGIN
    DBMS_OUTPUT.PUT_LINE('EMPLOYEE INSERTION SUCCESSFUL');
END;
/

--CREATE AN AFTER UPDATE TRIGGER ON THE ALBUM TABLE THAT FIRES AFTER A ROW IS INSERTED IN THE TABLE
CREATE OR REPLACE TRIGGER TR_ALBUM_UPDATE
AFTER UPDATE ON CHINOOK.ALBUM
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('ALBUM UPDATE SUCCESSFUL');
END;
/

--CREATE AN AFTER DELETE TRIGGER ON THE CUSTOMER TABLE THAT FIRES AFTER A ROW IS DELETED FROM THE TABLE
CREATE OR REPLACE TRIGGER TR_CUSTOMER_DELETE
AFTER DELETE ON CHINOOK.CUSTOMER
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('CUSTOMER DELETION SUCCESSFUL');
END;
/

--CREATE AN INNER JOIN THAT JOINS CUSTOMERS AND ORDERS AND SPECIFIES THE NAME OF THE CUSTOMER AND THE INVOICEID
SELECT CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, INVOICE.INVOICEID
FROM CHINOOK.CUSTOMER CUSTOMER
INNER JOIN
CHINOOK.INVOICE INVOICE
ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

/** CREATE AN OUTTER JOIN THAT JOINS THE CUSTOMER AND INVOICE TABLE, 
    SPECIFYING THE CUSTOMERID, FIRSTNAME, LASTNAME, INVOICEID, AND TOTAL**/
SELECT C.CUSTOMERID, C.FIRSTNAME, C.LASTNAME, I.INVOICEID, I.TOTAL
FROM CHINOOK.CUSTOMER C
FULL OUTER JOIN
CHINOOK.INVOICE I
ON C.CUSTOMERID = I.CUSTOMERID;

--CREATE A RIGHT JOIN THAT JOINS ALBUM AND ARTIST SPECIFYING ARTIST NAME AND TITLE
SELECT ARTIST.NAME, ALBUM.TITLE
FROM
CHINOOK.ALBUM ALBUM
RIGHT JOIN
CHINOOK.ARTIST ARTIST
ON ALBUM.ARTISTID = ARTIST.ARTISTID;

--CREATE A CROSS JOIN THAT JOINS ALBUM AND ARTIST AND SORTS BY ARTIST NAME IN ASCENDING ORDER
SELECT *
FROM 
CHINOOK.ALBUM ALBUM
CROSS JOIN
CHINOOK.ARTIST ARTIST
ORDER BY ARTIST.NAME ASC;


--PERFORM A SELF-JOIN ON THE EMPLOYEE TABLE, JOINING ON THE REPORTS TO COLUMN
SELECT *
FROM 
CHINOOK.EMPLOYEE E1
JOIN
CHINOOK.EMPLOYEE E2
ON E1.REPORTSTO = E2.EMPLOYEEID;

--SQL LAB COMPLETE





















