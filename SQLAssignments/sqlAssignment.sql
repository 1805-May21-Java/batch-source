--QUERRIES FOR ALL EMPLOYEES
SELECT * FROM CHINOOK.EMPLOYEE;

--SEARCHES EMPLOYEE TABLE FOR MEMBERS WITH THE LAST NAME OF KING
SELECT * FROM CHINOOK.EMPLOYEE
WHERE LASTNAME = 'King';

--CHECK FOR EMPLOYEES NAMED ANDREW AND REPORTSTO IS NULL
SELECT * FROM CHINOOK.EMPLOYEE
WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL;

--GET ALL ALBUMS AND ORDER THEM BY TITLE
SELECT * FROM CHINOOK.ALBUM
ORDER BY TITLE DESC;

--GET ALL CUSTOMERS FIRSTNAME AND THE CITY
--ORDER THEM BY CITY
SELECT FIRSTNAME,CITY FROM CHINOOK.CUSTOMER
ORDER BY CITY;

--INSERT A NEW GENRE WITH AN ID AND NAME
INSERT INTO CHINOOK.GENRE VALUES(26,'HARDER ROCK');
INSERT INTO CHINOOK.GENRE VALUES( 27 , 'FOLK ROCK');

--INSERT A NEW EMPLOEE WITH A UNIQUE ID AND NAME
INSERT INTO CHINOOK.EMPLOYEE(EMPLOYEEID , FIRSTNAME , LASTNAME)
VALUES(9,'THOMAS','JANSEN');
INSERT INTO CHINOOK.EMPLOYEE(EMPLOYEEID,FIRSTNAME,LASTNAME)
VALUES(10,'OLIVER','PHI');

--INSERT A NEW CUSTOMER WITH A FIRST AND LAST NAME
INSERT INTO CHINOOK.CUSTOMER(CUSTOMERID,FIRSTNAME,LASTNAME,EMAIL)
VALUES(60,'JAY','FELDMAN','JJBIGMAN@HOTMAIL.COM');
INSERT INTO CHINOOK.CUSTOMER(CUSTOMERID,FIRSTNAME,LASTNAME,EMAIL)
VALUES(61,'NOAH','GEORGE','TWOOFEVERYTHING@GMAIL.COM');

--UPDATE THE CUSTOMER TABLE 
--CHANGING THE NAME OF AARON TO ROBERT
UPDATE CHINOOK.CUSTOMER
SET FIRSTNAME = 'Robert', LASTNAME = 'Walter'
WHERE FIRSTNAME = 'Aaron' AND LASTNAME = 'Mitchell';

--CHANGE ARTIST TO CCR
UPDATE CHINOOK.ARTIST
SET NAME = 'CCR'
WHERE NAME = 'Creedence Clearwater Revival';

--FIND ALL BILLING ADDRESSES THAT START WITH A T
SELECT * FROM CHINOOK.INVOICE
WHERE BILLINGADDRESS LIKE 'T%';

--FIND ALL INVOICE TOTALS BETWEEN 15 AND 50
SELECT * FROM CHINOOK.INVOICE
WHERE TOTAL BETWEEN 15 AND 50;

--FINDS ALL HIREDATES FOR EMPLOYEES WITHIN GIVEN RANGE
SELECT * FROM CHINOOK.EMPLOYEE
WHERE HIREDATE BETWEEN DATE'2003-06-01' AND DATE'2004-03-01';

--DROPS THE FOREIGN KEY CONSTRAINT SO IT CAN BE CHANGED
ALTER TABLE CHINOOK.INVOICE
DROP CONSTRAINT FK_INVOICECUSTOMERID;

--CHANGES CONSTRAINT TO CASCADE ON DELETE
ALTER TABLE CHINOOK.INVOICE
ADD CONSTRAINT FK_INVOICECUSTOMERID FOREIGN KEY (CUSTOMERID) REFERENCES CHINOOK.CUSTOMER ON DELETE CASCADE;

--SAME AS INVOICE
ALTER TABLE CHINOOK.INVOICELINE
DROP CONSTRAINT FK_INVOICELINEINVOICEID;

ALTER TABLE CHINOOK.INVOICELINE
ADD CONSTRAINT FK_INVOICELINEINVOICEID FOREIGN KEY (INVOICEID) REFERENCES CHINOOK.INVOICE ON DELETE CASCADE;

--REMOVE DESIRED CUSTOMER
--WILL REMOVE INVOICE AND INVOICELINE ELEMENTS AS WELL
DELETE FROM CHINOOK.CUSTOMER
WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter';

--DEFINE FUNCTION FOR RETURNING CURRENT TIME
CREATE OR REPLACE FUNCTION CHINOOK.GET_DATE
RETURN TIMESTAMP
IS
BEGIN
    RETURN CURRENT_TIMESTAMP;
END;
/

--DEFINE A FUNCTION FOR RETURNING THE LENGTH OF A NAME FORM MEDITYPE
CREATE OR REPLACE FUNCTION CHINOOK.GET_NAME_LENGTH(NAME VARCHAR2)
RETURN VARCHAR2
IS
BEGIN
    RETURN LENGTH(NAME);
END;
/

--DEFINE A FUNCTION TO THAT RETURNS THE AVERAGE TOTAL OF ALL INVOICES
CREATE OR REPLACE FUNCTION CHINOOK.GET_AVERAGE_INVOICE_TOTAL
RETURN NUMBER
IS
AVERAGE NUMBER(10,2);
BEGIN
    SELECT AVG(TOTAL) INTO AVERAGE FROM CHINOOK.INVOICE;
    RETURN AVERAGE;
END;
/

--DEFINE A FUNCTION THAT RETURNS A CURSOR TO THE MOST EXPENSIVE TRACKS
CREATE OR REPLACE FUNCTION CHINOOK.GET_MOST_EXPENSIVE_TRACKS
RETURN SYS_REFCURSOR
IS
CUR SYS_REFCURSOR;
BEGIN
    OPEN CUR FOR SELECT NAME FROM CHINOOK.TRACK WHERE UNITPRICE = (SELECT MAX(UNITPRICE) FROM CHINOOK.TRACK);
    RETURN CUR;
END;
/

--A SCALAR FUNCTION THAT RETURNS THE AVERAGE UNITPRICE FROM INVOICELINE
CREATE OR REPLACE FUNCTION CHINOOK.GET_AVERAGE_INVOICELINE_PRICE
RETURN NUMBER
IS
TOTAL NUMBER(10,2);
CNT NUMBER(10);
AVERAGE NUMBER(10,2);
BEGIN
    SELECT SUM(UNITPRICE) INTO TOTAL FROM CHINOOK.INVOICELINE;
    SELECT COUNT(UNITPRICE) INTO CNT FROM CHINOOK.INVOICELINE;
    AVERAGE := TOTAL / CNT;
    RETURN AVERAGE;
END;
/

--A FUNCTION THAT GETS ALL EMPLOYEES WHO WERE BORN AGTER 1968
CREATE OR REPLACE FUNCTION CHINOOK.FIND_EMPLOYEES_AFTER_68
RETURN SYS_REFCURSOR
IS
CUR SYS_REFCURSOR;
BEGIN
    OPEN CUR FOR SELECT * FROM CHINOOK.EMPLOYEE WHERE BIRTHDATE > DATE '1969-01-01';
    RETURN CUR;
END;
/

--A STORED PROCEDURE THAT GETS THE FIRST AND LAST NAME OF ALL EMPLOYEES
CREATE OR REPLACE PROCEDURE CHINOOK.GET_EMPLOYEE_NAME( CUR OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN CUR FOR SELECT FIRSTNAME,LASTNAME FROM CHINOOK.EMPLOYEE;
END;
/

--PROCEDURE FOR UPDATING AN EMPLOYEES PERSONAL INFO
CREATE OR REPLACE PROCEDURE CHINOOK.UPDATE_INFO( EMPNAME VARCHAR2)
IS
BEGIN
    UPDATE CHINOOK.EMPLOYEE SET TITLE = 'THE BOSS' WHERE FIRSTNAME = EMPNAME;
END;
/

--A STORED PROCEDURE THAT GETS THE MANAGER OF AN EMPLOYEE
CREATE OR REPLACE PROCEDURE CHINOOK.GET_MANAGER( E_ID IN CHINOOK.EMPLOYEE.EMPLOYEEID%TYPE)
IS
M_ID NUMBER;
BEGIN
    SELECT REPORTSTO INTO M_ID FROM CHINOOK.EMPLOYEE WHERE EMPLOYEEID = E_ID;
    DBMS_OUTPUT.PUT_LINE(M_ID);
END;
/

--A PROCEDURE THAT RETURNS THE NAME AND COMPANY OF A CUSTOMER
CREATE OR REPLACE PROCEDURE CHINOOK.GET_NAME_AND_COMPANY( NM OUT VARCHAR2 , COMP OUT VARCHAR2 )
IS
BEGIN
    SELECT FIRSTNAME INTO NM FROM CHINOOK.CUSTOMER WHERE CUSTOMERID = 1;
    SELECT COMPANY INTO COMP FROM CHINOOK.CUSTOMER WHERE CUSTOMERID = 1;
END;
/

--PROCEDURE THAT TAKES AN INVOPICE ID AND DELETES IT.
--WORKS BECAUSE PREVIOUS QUESTION USED CASCADE ON DELETE
CREATE OR REPLACE PROCEDURE CHINOOK.DELETE_TRANSACTION(INP_INVOICE_ID IN NUMBER )
IS
BEGIN
    DELETE FROM CHINOOK.INVOICE
    WHERE INVOICEID = INP_INVOICE_ID;
    COMMIT;
END;
/

--A METHOD TO INSERT A NEW RECORD
CREATE OR REPLACE PROCEDURE CHINOOK.INSERT_NEW_ELEM
IS
BEGIN 
    INSERT INTO CHINOOK.CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL) 
    VALUES(62,'TOM','JOHNSON','TJOHN@GMAIL.COM');
    COMMIT;
END;
/

--A TRIGGER THAT SETS EACH NEW EMPLOYEE'S TITLE TO BE BOTTOM OF THE FOOD CHAIN
CREATE OR REPLACE TRIGGER CHINOOK.TR_NEW_EMPLOYEE
AFTER INSERT ON CHINOOK.EMPLOYEE
FOR EACH ROW
BEGIN
    UPDATE CHINOOK.EMPLOYEE SET TITLE = 'LOW MAN' WHERE EMPLOYEEID = :NEW.EMPLOYEEID;
    COMMIT;
END;
/

-- A TRIGGER THAT CHANGES AN ALBUM TITLE TO BASIC JAVA OUTPUT
CREATE OR REPLACE TRIGGER CHINOOK.BASIC_JAVA_ALBUM
AFTER UPDATE ON CHINOOK.ALBUM
FOR EACH ROW
BEGIN
     UPDATE CHINOOK.ALBUM SET TITLE = 'BASIC JAVA OUTPUT' WHERE ALBUMID = :NEW.TITLE;
     COMMIT;
END;
/

--DELETES EMPLOYEE ASSOCIATED WITH CUSTOMER
CREATE OR REPLACE TRIGGER CHINOOK.FIRED_CUSTOMER
AFTER DELETE ON CHINOOK.CUSTOMER
BEGIN
    DELETE FROM CHINOOK.EMPLOYEE WHERE EMPLOYEEID = :OLD.SUPPORTERPID;
    COMMIT;
END;
/


--INNER JOIN ON CUSTOMER AND INVOID WHERE THE ID'S ALIGN
SELECT CUSTOM.FIRSTNAME "FIRST NAME", CUSTOM.LASTNAME "LAST NAME", INV.INVOICEID INVOICE
FROM CHINOOK.CUSTOMER CUSTOM
JOIN CHINOOK.INVOICE INV
ON CUSTOM.CUSTOMERID = INV.CUSTOMERID;

--OUTER JOIN ON CUSTOMER AND INVOICE BASED ON THEIR ID'S
SELECT CUSTOM.CUSTOMERID "CUSTOMER ID", CUSTOM.FIRSTNAME "FIRST NAME", CUSTOM.LASTNAME "LAST NAME", INV.INVOICEID INVOICE, INV.TOTAL
FROM CHINOOK.CUSTOMER CUSTOM
JOIN CHINOOK.INVOICE INV
ON CUSTOM.CUSTOMERID = INV.CUSTOMERID;

--RIGHT JOIN ON ARTIST AND ALBUM WHERE THE ARTIST MADE THE ALBUM
SELECT ARTIST.NAME "ARTIST", ALBUM.TITLE
FROM CHINOOK.ARTIST
RIGHT JOIN CHINOOK.ALBUM
ON ARTIST.ARTISTID = ALBUM.ARTISTID;

--CROSS JOIN THAT GIVES THE ALBUM AND THE ARTIST RESPONSIBLE
SELECT *
FROM CHINOOK.ARTIST
CROSS JOIN CHINOOK.ALBUM
WHERE ARTIST.ARTISTID = ALBUM.ARTISTID
ORDER BY ARTIST.NAME;

--FINDS EMPLOYEES THAT SHARE A BIRTHDAY
--NONE EXIST
SELECT * 
FROM CHINOOK.EMPLOYEE E1, CHINOOK.EMPLOYEE E2
WHERE E1.BIRTHDATE = E2.BIRTHDATE AND E1.EMPLOYEEID <> E2.EMPLOYEEID;



