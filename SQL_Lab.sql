--2.0 SQL QUERIES
--2.1 SELECT
SELECT *
FROM CHINOOK.EMPLOYEE;

SELECT *
FROM CHINOOK.EMPLOYEE
WHERE LASTNAME = 'King';

SELECT *
FROM CHINOOK.EMPLOYEE
WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL;

--2.2 ORDER BY
SELECT *
FROM CHINOOK.ALBUM
ORDER BY TITLE DESC;

SELECT FIRSTNAME
FROM CHINOOK.CUSTOMER
ORDER BY CITY;

--2.3 INSERT INTO
INSERT INTO CHINOOK.GENRE VALUES (26, 'Folk');
INSERT INTO CHINOOK.GENRE VALUES (27, 'Funk');

INSERT INTO CHINOOK.EMPLOYEE VALUES (9, 'James', 'LeBron', 'IT Staff', 6, DATE '1984-12-30', DATE '2012-03-13', '15718 Hosler Rd', 'Akron', 'OH', 'USA', '44320', '+1 (330) 422-6185', '+1 (330) 432-6657', 'lebron@chinookcorp.com');
INSERT INTO CHINOOK.EMPLOYEE VALUES (10, 'Malone', 'Austin', 'Sales Support Agent', 2, DATE '1995-07-04', DATE '2015-11-22', '71245 Grant St', 'Syracuse', 'NY', 'USA', '13290', '+1 (315) 625-8910', '+1 (315) 8995', 'austin@chinookcorp.com');

INSERT INTO CHINOOK.CUSTOMER VALUES (60, 'Jason', 'Brady', 'Intel', '52395 Main St', 'San Francisco', 'CA', 'USA', '94105', '+1 (415)-4863', NULL, 'jasonb@gmail.com', 10);
INSERT INTO CHINOOK.CUSTOMER VALUES (61, 'Mariah', 'Mooney', 'Petroleum Inc', '4192 Martin Luther King Blvd', 'Dallas', 'TX', 'USA', '75063', '+1 (214)-4114', '+1 (415)-9920', 'mmooney@petro.com', 10);

--2.4 UPDATE
UPDATE CHINOOK.CUSTOMER
SET FIRSTNAME = 'Robert', LASTNAME = 'Walter'
WHERE FIRSTNAME = 'Aaron' AND LASTNAME = 'Mitchell';

UPDATE CHINOOK.ARTIST
SET NAME = 'CCR'
WHERE NAME = 'Creedence Clearwater Revival';

--2.5 LIKE
SELECT *
FROM CHINOOK.INVOICE
WHERE BILLINGADDRESS LIKE 'T%';

--2.6 BETWEEN
SELECT *
FROM CHINOOK.INVOICE
WHERE TOTAL BETWEEN 15 AND 50;

SELECT *
FROM CHINOOK.EMPLOYEE
WHERE HIREDATE BETWEEN TO_DATE('2003/05/01', 'yyyy/mm/dd') AND TO_DATE('2004/03/01', 'yyyy/mm/dd');

--2.7 DELETE
SELECT *
FROM CHINOOK.CUSTOMER
WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter';

ALTER TABLE CHINOOK.INVOICE
DROP CONSTRAINT FK_INVOICECUSTOMERID;

DELETE FROM CHINOOK.CUSTOMER
WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter';

--3.0 SQL FUNCTIONS
--3.1 SYSTEM DEFINED FUNCTIONS 
CREATE OR REPLACE FUNCTION CHINOOK.GET_TIME
RETURN VARCHAR2
IS
CURRENTTIME VARCHAR2(11);
BEGIN
    SELECT TO_CHAR(LOCALTIMESTAMP, 'HH24:MI:SS') INTO CURRENTTIME
    FROM DUAL;
    RETURN CURRENTTIME;
END;
/

SELECT CHINOOK.GET_TIME() AS CURRENTTIME FROM DUAL;

CREATE OR REPLACE FUNCTION CHINOOK.GET_LENGTH (MED_ID NUMBER)
    RETURN NUMBER
    IS 
    LEN NUMBER(3);
    BEGIN
        SELECT LENGTH(NAME) 
        INTO LEN
        FROM CHINOOK.MEDIATYPE 
        WHERE  MED_ID = MEDIATYPEID;
        
        RETURN LEN;
    END ;
/
SELECT NAME, CHINOOK.GET_LENGTH(MEDIA.MEDIATYPEID) NAME_LENGTH
FROM CHINOOK.MEDIATYPE MEDIA;

--3.2 SYSTEM DEFINED AGREGATE FUNCTIONS
CREATE OR REPLACE FUNCTION CHINOOK.AVG_TOTAL_INVOICES
    RETURN NUMBER
    IS 
    AVG_TOTAL NUMBER(5,2);
    BEGIN 
        SELECT AVG(TOTAL) INTO AVG_TOTAL
        FROM CHINOOK.INVOICE;
        RETURN AVG_TOTAL;
    END;
/
    
SELECT CHINOOK.AVG_TOTAL_INVOICES() FROM DUAL;

CREATE OR REPLACE FUNCTION CHINOOK.MOST_EXPENSIVE_TRACK
    RETURN SYS_REFCURSOR
    IS 
    MAXIMUM NUMBER(10,2);
    Q SYS_REFCURSOR;
    BEGIN
        SELECT MAX(UNITPRICE) INTO MAXIMUM FROM CHINOOK.TRACK;
        OPEN Q FOR
        SELECT NAME FROM CHINOOK.TRACK WHERE UNITPRICE = MAXIMUM;
        RETURN Q;
    END;
/

DECLARE
    Q SYS_REFCURSOR;
BEGIN
    Q := CHINOOK.MOST_EXPENSIVE_TRACK();
    DBMS_SQL.RETURN_RESULT(Q);
END;

SELECT NAME, UNITPRICE FROM CHINOOK.TRACK
WHERE UNITPRICE = (  SELECT MAX(UNITPRICE) FROM CHINOOK.TRACK);

--3.3 USER DEFINED SCALAR FUNCTIONS
CREATE OR REPLACE FUNCTION CHINOOK.AVG_PRICE
    RETURN NUMBER
    IS TOTAL NUMBER(10,2);
    ITEMS NUMBER(10, 2);
    AVERAGE NUMBER(10, 2);
    BEGIN
        SELECT SUM(UNITPRICE) INTO TOTAL FROM CHINOOK.INVOICELINE;
        SELECT COUNT(*) INTO ITEMS FROM CHINOOK.INVOICELINE;
        AVERAGE := TOTAL/ITEMS;
        RETURN AVERAGE;
    END;
/

SELECT CHINOOK.AVG_PRICE() FROM DUAL;

--3.4 USER DEFINED TABLE VALUED FUNTIONS
CREATE OR REPLACE FUNCTION CHINOOK.EMPLOYEES_AFTER_68
    RETURN SYS_REFCURSOR
    IS Q SYS_REFCURSOR;
    BEGIN    
        OPEN Q FOR 
        SELECT * FROM EMPLOYEE WHERE BIRTHDATE >= DATE '1969-01-01';
        RETURN Q;
    END;
/

DECLARE
    Q SYS_REFCURSOR;
BEGIN 
    Q := CHINOOK.EMPLOYEES_AFTER_68();
    DBMS_SQL.RETURN_RESULT(Q);
END;

--4.0 STORED PROCEDURES
--4.1 BASIC STORED PROCEDURES
CREATE OR REPLACE PROCEDURE GET_ALL_EMPLOYEES (S OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN S FOR
    SELECT CHINOOK.EMPLOYEE.LASTNAME, CHINOOK.EMPLOYEE.FIRSTNAME FROM CHINOOK.EMPLOYEE;
END;
/

SET SERVEROUTPUT ON;

DECLARE
    SVAR SYS_REFCURSOR;
    TEMP_LASTNAME CHINOOK.EMPLOYEE.LASTNAME%TYPE;
    TEMP_FIRSTNAME CHINOOK.EMPLOYEE.FIRSTNAME%TYPE;
BEGIN
    GET_ALL_EMPLOYEES(SVAR);
    LOOP
        FETCH SVAR INTO TEMP_LASTNAME, TEMP_FIRSTNAME;
        EXIT WHEN SVAR%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(TEMP_FIRSTNAME||' '||TEMP_LASTNAME);
    END LOOP;
    CLOSE SVAR;
END;

--4.2 STORED PROCEDURE INPUT PARAMETERS
CREATE OR REPLACE PROCEDURE CHINOOK.UPDATE_EMPLOYEE(EMP_ID IN CHINOOK.EMPLOYEE.EMPLOYEEID%TYPE, NEW_FIRST IN CHINOOK.EMPLOYEE.FIRSTNAME%TYPE)
IS
BEGIN
    UPDATE CHINOOK.EMPLOYEE
    SET CHINOOK.EMPLOYEE.FIRSTNAME = NEW_FIRST
    WHERE CHINOOK.EMPLOYEE.EMPLOYEEID = EMP_ID;
END;

BEGIN
    CHINOOK.UPDATE_EMPLOYEE(10, 'Post');
    COMMIT;
END;
/

SET SERVEROUTPUT ON;

CREATE OR REPLACE PROCEDURE CHINOOK.GET_MANAGERS(EMP_ID IN CHINOOK.EMPLOYEE.EMPLOYEEID%TYPE)
IS
    EMP_F VARCHAR2(25);
    EMP_L VARCHAR2(25);
    MANG_F VARCHAR2(25);
    MANG_L VARCHAR2(25);
BEGIN
    SELECT EMP.FIRSTNAME, EMP.LASTNAME,
           MANG.FIRSTNAME, MANG.LASTNAME
           INTO EMP_F, EMP_L, MANG_F, MANG_L
    FROM CHINOOK.EMPLOYEE EMP
    INNER JOIN CHINOOK.EMPLOYEE MANG
    ON MANG.EMPLOYEEID = EMP.REPORTSTO
    WHERE EMP.EMPLOYEEID = EMP_ID;
    DBMS_OUTPUT.PUT_LINE(MANG_F||' ' ||MANG_L||' is the Manager of '||EMP_F||' '||EMP_L);
END;
/

BEGIN
    CHINOOK.GET_MANAGERS(3);
END;

--4.3 STORED PROCEDURE OUTPUT PARAMETERS
CREATE OR REPLACE PROCEDURE CHINOOK.CUSTOMER_COMPANY (S OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN S FOR
    SELECT FIRSTNAME, LASTNAME, COMPANY FROM CHINOOK.CUSTOMER;
END;
/

DECLARE
    SVAR SYS_REFCURSOR;
    CUST_FNAME CHINOOK.CUSTOMER.FIRSTNAME%TYPE;
    CUST_LNAME CHINOOK.CUSTOMER.LASTNAME%TYPE;
    CUST_CORP CHINOOK.CUSTOMER.COMPANY%TYPE;
BEGIN
    CHINOOK.CUSTOMER_COMPANY(SVAR);
    LOOP
        FETCH SVAR INTO CUST_FNAME, CUST_LNAME, CUST_CORP;
        EXIT WHEN SVAR%NOTFOUND;
        IF(CUST_CORP IS NULL) THEN
            DBMS_OUTPUT.PUT_LINE(CUST_FNAME||' '||CUST_LNAME||' does not have a company on file');
        ELSE
            DBMS_OUTPUT.PUT_LINE(CUST_FNAME||' '||CUST_LNAME||' works for '||CUST_CORP);
        END IF;
    END LOOP;
    CLOSE SVAR;
END;   
/

--5.0 TRANSACTIONS
ALTER TABLE CHINOOK.INVOICELINE
DROP CONSTRAINT FK_INVOICELINEINVOICEID;

CREATE OR REPLACE PROCEDURE CHINOOK.DELETE_INVOICE (INVOICE_NUM IN NUMBER)
IS
BEGIN
    DELETE FROM CHINOOK.INVOICE WHERE INVOICE_NUM = INVOICEID;
END;

BEGIN
    CHINOOK.DELETE_INVOICE(24);
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE CHINOOK.INSERT_CUSTOMER
IS
BEGIN
    INSERT INTO CHINOOK.CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY) VALUES (62, 'Thad', 'Castle', 'Blue Mountain State');
    COMMIT;
END;
/

--6.0 TRIGGERS
CREATE TABLE CHINOOK.RESULTS(
    QUESTION NUMBER(2,1),
    MESSEGE VARCHAR2(25)
);

--6.1 AFTER/FOR
CREATE OR REPLACE TRIGGER CHINOOK.TR_INSERT_EMPLOYEE
AFTER INSERT ON CHINOOK.EMPLOYEE
FOR EACH ROW
BEGIN  
    INSERT INTO CHINOOK.RESULTS VALUES (6.1, 'COMPLETE');
END;
/

DELETE FROM CHINOOK.EMPLOYEE WHERE EMPLOYEEID = 11;
INSERT INTO CHINOOK.EMPLOYEE (EMPLOYEEID, FIRSTNAME, LASTNAME) VALUES (11, 'Harrison', 'Ford');

CREATE OR REPLACE TRIGGER CHINOOK.TR_UPDATE_ALBUM
AFTER UPDATE ON CHINOOK.ALBUM
BEGIN
    INSERT INTO CHINOOK.RESULTS VALUES(6.2, 'COMPLETE');
END;
/

UPDATE CHINOOK.ALBUM
SET TITLE = '6.1 Trigger Testing'
WHERE ALBUMID = 24;

CREATE OR REPLACE TRIGGER CHINOOK.TR_DELETE_CUSTOMER
AFTER DELETE ON CHINOOK.CUSTOMER
BEGIN
    INSERT INTO CHINOOK.RESULTS VALUES(6.3, 'COMPLETE');
END;
/

DELETE FROM CHINOOK.CUSTOMER WHERE CUSTOMERID = 52;

--7.0 JOINS
--7.1 INNER
SELECT CONCAT(CONCAT(CHINOOK.CUSTOMER.FIRSTNAME, ' '), CHINOOK.CUSTOMER.LASTNAME) NAME, CHINOOK.INVOICE.INVOICEID
FROM CHINOOK.CUSTOMER
INNER JOIN CHINOOK.INVOICE
ON CHINOOK.CUSTOMER.CUSTOMERID = CHINOOK.INVOICE.CUSTOMERID;

--7.2 OUTER
SELECT CHINOOK.CUSTOMER.CUSTOMERID, CHINOOK.CUSTOMER.FIRSTNAME, CHINOOK.CUSTOMER.LASTNAME, CHINOOK.INVOICE.INVOICEID, CHINOOK.INVOICE.TOTAL
FROM CHINOOK.CUSTOMER
FULL OUTER JOIN CHINOOK.INVOICE
ON CHINOOK.CUSTOMER.CUSTOMERID = CHINOOK.INVOICE.CUSTOMERID;

--7.3 RIGHT
SELECT CHINOOK.ARTIST.NAME, CHINOOK.ALBUM.TITLE
FROM CHINOOK.ALBUM
RIGHT JOIN CHINOOK.ARTIST
ON CHINOOK.ALBUM.ARTISTID = CHINOOK.ARTIST.ARTISTID;

--7.4 CROSS
SELECT CHINOOK.ARTIST.NAME
FROM CHINOOK.ALBUM
CROSS JOIN CHINOOK.ARTIST
ORDER BY CHINOOK.ARTIST.NAME ASC;

--7.5 SELF
SELECT *
FROM CHINOOK.EMPLOYEE EMP, CHINOOK.EMPLOYEE MANG
WHERE EMP.REPORTSTO = MANG.EMPLOYEEID;