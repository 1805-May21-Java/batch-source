SET SERVEROUTPUT ON;

-- 2.1 SELECT
SELECT * FROM CHINOOK.EMPLOYEE;
SELECT * FROM CHINOOK.EMPLOYEE
WHERE LASTNAME = 'King';
SELECT * FROM CHINOOK.EMPLOYEE
WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL;

-- 2.2 ORDER BY
SELECT * FROM CHINOOK.ALBUM
ORDER BY TITLE DESC;
SELECT FIRSTNAME FROM CHINOOK.CUSTOMER
ORDER BY CITY ASC;

-- 2.3 INSERT INTO
INSERT INTO CHINOOK.GENRE VALUES(26, 'Jazz Fusion Metal');
INSERT INTO CHINOOK.GENRE VALUES(27, 'Freeform Jazz');

INSERT INTO CHINOOK.EMPLOYEE VALUES(9, 'Baulos', 'Micheal', 'Software Developer', 6, DATE '1995-09-26', DATE '2018-05-14', '1 Main Ave', 'Main City', 'Maine', 'United States', '42073', '+1 (800) 444-4444', '+1 (800) 555-5555', 'torpedofiring101@hotmail.com');
INSERT INTO CHINOOK.EMPLOYEE VALUES(10, 'Feltman', 'Kay', 'Software Developer', 6, DATE '1892-06-26', DATE '2018-05-14', '2 Main Ave', 'Main City', 'Maine', 'United States', '42073', '+1 (800) 667-6676', '+1 (800) 123-4567', 'cannonfiring101@revature.com');

INSERT INTO CHINOOK.CUSTOMER VALUES(60, 'Dorian', 'Smath', 'Raveture', 'Canada', 'There', 'Where everyone else is', 'Canada', '11111', '+1 (235) 895-8322', '+1 (235) 895-8323', 'dorsmath@aol.com', 9);
INSERT INTO CHINOOK.CUSTOMER VALUES(61, 'Scott', 'Dorque', 'Enron', 'Anchorage', 'Anchorage', 'Anchorage', 'Anchorage', '6666666666', '+1 (555) 867-5309', NULL, 'ascannerdourquelee@aol.com', 10);

-- 2.4 UPDATE
UPDATE CHINOOK.CUSTOMER
SET FIRSTNAME = 'Robert', LASTNAME = 'Walter'
WHERE FIRSTNAME = 'Aaron' AND LASTNAME = 'Mitchell';

UPDATE CHINOOK.ARTIST
SET NAME = 'CCR'
WHERE NAME = 'Creedence Clearwater Revival';

-- 2.5 LIKE
SELECT * FROM CHINOOK.INVOICE
WHERE BILLINGADDRESS LIKE 'T%';

-- 2.6 BETWEEN
SELECT * FROM CHINOOK.INVOICE
WHERE TOTAL BETWEEN 15 AND 50;

SELECT * FROM CHINOOK.EMPLOYEE
WHERE HIREDATE BETWEEN DATE '2003-06-01' AND DATE '2004-03-01';

-- 2.7 DELETE
ALTER TABLE CHINOOK.CUSTOMER
DROP CONSTRAINT FK_CUSTOMERSUPPORTREPID;

ALTER TABLE CHINOOK.CUSTOMER
ADD CONSTRAINT FK_CUSTOMERSUPPORTREPID
FOREIGN KEY (SUPPORTREPID)
REFERENCES CHINOOK.EMPLOYEE(EMPLOYEEID)
ON DELETE CASCADE;

ALTER TABLE CHINOOK.INVOICE
DROP CONSTRAINT FK_INVOICECUSTOMERID;

ALTER TABLE CHINOOK.INVOICE
ADD CONSTRAINT FK_INVOICECUSTOMERID
FOREIGN KEY (CUSTOMERID)
REFERENCES CHINOOK.CUSTOMER(CUSTOMERID)
ON DELETE CASCADE;

ALTER TABLE CHINOOK.INVOICELINE
DROP CONSTRAINT FK_INVOICELINEINVOICEID;

ALTER TABLE CHINOOK.INVOICELINE
ADD CONSTRAINT FK_INVOICELINEINVOICEID
FOREIGN KEY (INVOICEID)
REFERENCES CHINOOK.INVOICE(INVOICEID)
ON DELETE CASCADE;

DELETE FROM CHINOOK.CUSTOMER
WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter';

-- 3.1 SYSTEM DEFINED FUNCTIONS
CREATE OR REPLACE FUNCTION SHOW_TIME
RETURN TIMESTAMP
IS
BEGIN
    RETURN CURRENT_TIMESTAMP();
END;
/

CREATE OR REPLACE FUNCTION LENGTH_OF_MEDIATYPE_NAME(MEDIA_ID NUMBER)
RETURN NUMBER
IS TEMP_NUM NUMBER;
BEGIN
    SELECT LENGTH(NAME) INTO TEMP_NUM FROM CHINOOK.MEDIATYPE
    WHERE MEDIATYPEID = MEDIA_ID;
    RETURN TEMP_NUM;
END;
/

-- 3.2 SYSTEM DEFINED AGGREGATE FUNCTIONS
CREATE OR REPLACE FUNCTION AVG_INVOICE_TOTAL
RETURN NUMBER
IS TEMP_NUM NUMBER;
BEGIN
    SELECT AVG(TOTAL) INTO TEMP_NUM FROM CHINOOK.INVOICE;
    RETURN TEMP_NUM;
END;
/

CREATE OR REPLACE FUNCTION MOST_EXPENSIVE_TRACK
RETURN VARCHAR
IS
TEMP_NAME VARCHAR2(200);
BEGIN
    SELECT NAME INTO TEMP_NAME FROM
    (SELECT * FROM CHINOOK.TRACK WHERE UNITPRICE =
    (SELECT MAX(UNITPRICE) FROM CHINOOK.TRACK))
    OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY;
    RETURN TEMP_NAME;
END;
/

-- 3.3 USER DEFINED SCALAR FUNCTIONS
CREATE OR REPLACE FUNCTION AVG_INVOICELINE_PRICE
RETURN NUMBER
IS TEMP_NUM NUMBER;
BEGIN
    SELECT AVG(UNITPRICE) INTO TEMP_NUM FROM CHINOOK.INVOICELINE;
    RETURN TEMP_NUM;
END;
/

-- 3.4 USER DEFINED TABLE VALUED FUNCTIONS
CREATE OR REPLACE FUNCTION EMPLOYEES_AFTER_1968
RETURN SYS_REFCURSOR
IS
S SYS_REFCURSOR;
BEGIN
    OPEN S FOR SELECT * FROM CHINOOK.EMPLOYEE WHERE BIRTHDATE > DATE '1968-12-31';
    RETURN S;    
END;
/

-- 4.1 BASIC STORED PROCEDURE
CREATE OR REPLACE PROCEDURE EMPL_FIRST_AND_LAST(S OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN S FOR SELECT FIRSTNAME, LASTNAME FROM CHINOOK.EMPLOYEE;
END;
/

-- 4.2 STORED PROCEDURE INPUT PARAMETERS
CREATE OR REPLACE PROCEDURE CHINOOK.UPDATE_EMPLOYEE(
EMPL_ID IN CHINOOK.EMPLOYEE.EMPLOYEEID%TYPE,
LAST_NAME IN CHINOOK.EMPLOYEE.LASTNAME%TYPE,
FIRST_NAME IN CHINOOK.EMPLOYEE.FIRSTNAME%TYPE,
BIRTH_DATE IN CHINOOK.EMPLOYEE.BIRTHDATE%TYPE,
NEW_ADDRESS IN CHINOOK.EMPLOYEE.ADDRESS%TYPE,
NEW_CITY IN CHINOOK.EMPLOYEE.CITY%TYPE,
NEW_STATE IN CHINOOK.EMPLOYEE.STATE%TYPE,
NEW_COUNTRY IN CHINOOK.EMPLOYEE.COUNTRY%TYPE,
POSTAL_CODE IN CHINOOK.EMPLOYEE.POSTALCODE%TYPE)
IS
BEGIN
    UPDATE CHINOOK.EMPLOYEE SET
    LASTNAME = LAST_NAME, FIRSTNAME = FIRST_NAME,
    BIRTHDATE = BIRTH_DATE, ADDRESS = NEW_ADDRESS,
    CITY = NEW_CITY, STATE = NEW_STATE,
    COUNTRY = NEW_COUNTRY, POSTALCODE = POSTAL_CODE
    WHERE EMPLOYEEID = EMPL_ID;
END;
/

CREATE OR REPLACE PROCEDURE FIND_MANAGER(
EMPL_ID IN CHINOOK.EMPLOYEE.EMPLOYEEID%TYPE,
MANAGER_NAME OUT VARCHAR)
IS
TEMP_NUM CHINOOK.EMPLOYEE.EMPLOYEEID%TYPE;
TEMP_FIRST CHINOOK.EMPLOYEE.FIRSTNAME%TYPE;
TEMP_LAST CHINOOK.EMPLOYEE.LASTNAME%TYPE;
BEGIN
    SELECT REPORTSTO INTO TEMP_NUM FROM CHINOOK.EMPLOYEE
    WHERE EMPLOYEEID = EMPL_ID;
    SELECT FIRSTNAME, LASTNAME INTO TEMP_FIRST, TEMP_LAST FROM CHINOOK.EMPLOYEE
    WHERE EMPLOYEEID = TEMP_NUM;
    MANAGER_NAME := CONCAT(TEMP_FIRST, CONCAT(' ', TEMP_LAST));
END;
/

CREATE OR REPLACE PROCEDURE CUSTOMER_INFO(
CUSTOMER_ID IN CHINOOK.CUSTOMER.CUSTOMERID%TYPE,
CUSTOMER_NAME OUT VARCHAR,
CUSTOMER_COMPANY OUT CHINOOK.CUSTOMER.COMPANY%TYPE)
IS
TEMP_FIRST CHINOOK.CUSTOMER.FIRSTNAME%TYPE;
TEMP_LAST CHINOOK.CUSTOMER.LASTNAME%TYPE;
BEGIN
    SELECT FIRSTNAME, LASTNAME, COMPANY
    INTO TEMP_FIRST, TEMP_LAST, CUSTOMER_COMPANY
    FROM CHINOOK.CUSTOMER WHERE CUSTOMERID = CUSTOMER_ID;
    CUSTOMER_NAME := CONCAT(TEMP_FIRST, CONCAT(' ', TEMP_LAST));
END;
/

-- 5.0 TRANSACTIONS
START TRANSACTION;
    DELETE FROM CHINOOK.INVOICE
    WHERE INVOICEID = INVOICE_ID;
COMMIT;

CREATE OR REPLACE PROCEDURE CHINOOK.INSERT_CUSTOMER(
EMPL_ID IN CHINOOK.CUSTOMER.CUSTOMERID%TYPE,
FIRST_NAME IN CHINOOK.CUSTOMER.FIRSTNAME%TYPE,
LAST_NAME IN CHINOOK.CUSTOMER.LASTNAME%TYPE,
NEW_COMPANY IN CHINOOK.CUSTOMER.COMPANY%TYPE,
NEW_ADDRESS IN CHINOOK.CUSTOMER.ADDRESS%TYPE,
NEW_CITY IN CHINOOK.CUSTOMER.CITY%TYPE,
NEW_STATE IN CHINOOK.CUSTOMER.STATE%TYPE,
NEW_COUNTRY IN CHINOOK.CUSTOMER.COUNTRY%TYPE,
POSTAL_CODE IN CHINOOK.CUSTOMER.POSTALCODE%TYPE,
PHONE_NUMBER IN CHINOOK.CUSTOMER.PHONE%TYPE,
FAX_NUMBER IN CHINOOK.CUSTOMER.FAX%TYPE,
EMAIL_ADDRESS IN CHINOOK.CUSTOMER.EMAIL%TYPE,
SUPPORT_REP_ID IN CHINOOK.CUSTOMER.SUPPORTREPID%TYPE)
IS
BEGIN
    INSERT INTO CHINOOK.CUSTOMER VALUES(EMPL_ID, FIRST_NAME,
    LAST_NAME, NEW_COMPANY, NEW_ADDRESS, NEW_CITY, NEW_STATE,
    NEW_COUNTRY, POSTAL_CODE, PHONE_NUMBER, FAX_NUMBER,
    EMAIL_ADDRESS, SUPPORT_REP_ID);
    COMMIT;
END;
/

-- 6.1 AFTER/FOR TRIGGERS
CREATE OR REPLACE TRIGGER MY_AFTER_INSERT
AFTER INSERT ON CHINOOK.EMPLOYEE
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE(:NEW.FIRSTNAME||' inserted into Employee table.');
END;
/

CREATE OR REPLACE TRIGGER MY_AFTER_INSERT2
AFTER INSERT ON CHINOOK.ALBUM
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE(:NEW.TITLE||' inserted into Album table.');
END;
/

CREATE OR REPLACE TRIGGER MY_AFTER_DELETE
AFTER INSERT ON CHINOOK.CUSTOMER
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE(:OLD.FIRSTNAME||' deleted from table.');
END;
/

-- 7.1 INNER JOIN
SELECT FIRSTNAME, LASTNAME, INVOICEID FROM
CHINOOK.CUSTOMER INNER JOIN CHINOOK.INVOICE
ON CHINOOK.CUSTOMER.CUSTOMERID = CHINOOK.INVOICE.CUSTOMERID;

-- 7.2 OUTER JOIN
SELECT CHINOOK.CUSTOMER.CUSTOMERID, FIRSTNAME, LASTNAME, INVOICEID, TOTAL FROM
CHINOOK.CUSTOMER FULL JOIN CHINOOK.INVOICE
ON CHINOOK.CUSTOMER.CUSTOMERID = CHINOOK.INVOICE.CUSTOMERID;

-- 7.3 RIGHT JOIN
SELECT NAME, TITLE FROM
CHINOOK.ALBUM RIGHT JOIN CHINOOK.ARTIST
ON CHINOOK.ALBUM.ARTISTID = CHINOOK.ARTIST.ARTISTID;

-- 7.4 CROSS JOIN
SELECT * FROM
CHINOOK.ALBUM CROSS JOIN CHINOOK.ARTIST
ORDER BY CHINOOK.ARTIST.NAME ASC;

-- 7.5 SELF JOIN
SELECT * FROM
CHINOOK.EMPLOYEE T1, CHINOOK.EMPLOYEE T2
WHERE T1.REPORTSTO = T2.EMPLOYEEID;