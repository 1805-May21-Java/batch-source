DROP TABLE BANKUSER_BANKACCOUNT;
DROP TABLE BANKTRANSACTION;
DROP TABLE BANKUSER;
DROP TABLE BANKACCOUNT;
DROP SEQUENCE SQ_BANKUSER_PK;
DROP SEQUENCE SQ_BANKACCOUNT_PK;




CREATE TABLE BANKUSER (
    USERID NUMBER(5) CONSTRAINT PK_BANKUSER PRIMARY KEY,
    USERNAME VARCHAR2(20) NOT NULL,
    USEREMAIL VARCHAR2(50) NOT NULL,
    USERPASSWORD VARCHAR2(50) NOT NULL
);

CREATE TABLE BANKACCOUNT (
    ACCTNUMBER NUMBER(9) CONSTRAINT PK_BANKACCOUNT PRIMARY KEY,
    ACCTBALANCE NUMBER(11,2) DEFAULT 0 CHECK (ACCTBALANCE >= 0)
);

CREATE TABLE BANKUSER_BANKACCOUNT (
    USERID NUMBER(5) NOT NULL,
    ACCTNUMBER NUMBER(12) NOT NULL
);
ALTER TABLE BANKUSER_BANKACCOUNT
    ADD CONSTRAINT FK_REL_BANKUSER
    FOREIGN KEY (USERID) REFERENCES BANKUSER ON DELETE CASCADE;
ALTER TABLE BANKUSER_BANKACCOUNT
    ADD CONSTRAINT FK_REL_BANKACCOUNT
    FOREIGN KEY (ACCTNUMBER) REFERENCES BANKACCOUNT ON DELETE CASCADE;
    
CREATE TABLE BANKTRANSACTION (
    TRANSACTIONID NUMBER(5) CONSTRAINT PK_TRANSACTION PRIMARY KEY,
    ACCTNUMBER NUMBER(12), 
    TRANSACTIONDATE DATE,
    DESCRIPTION VARCHAR2(100)
);
ALTER TABLE BANKTRANSACTION
    ADD CONSTRAINT FK_ACCT_TRANSACTION
    FOREIGN KEY (ACCTNUMBER) REFERENCES BANKACCOUNT ON DELETE CASCADE;
    
    
    

CREATE SEQUENCE SQ_BANKUSER_PK
START WITH 1
INCREMENT BY 1;
/
CREATE SEQUENCE SQ_BANKACCOUNT_PK
START WITH 100000000
INCREMENT BY 567;
/
CREATE SEQUENCE SQ_BANKTRANSACTION_PK
START WITH 1
INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER TR_INSERT_BANKUSER
BEFORE INSERT ON BANKUSER
FOR EACH ROW
BEGIN
    SELECT SQ_BANKUSER_PK.NEXTVAL INTO :NEW.USERID FROM DUAL;
END;
/
CREATE OR REPLACE TRIGGER TR_BANKACCOUNT_PK
BEFORE INSERT ON BANKACCOUNT
FOR EACH ROW
BEGIN
    SELECT SQ_BANKACCOUNT_PK.NEXTVAL INTO :NEW.ACCTNUMBER FROM DUAL;
END;
/
CREATE OR REPLACE TRIGGER TR_BANKTRANSACTION_PK
BEFORE INSERT ON BANKTRANSACTION
FOR EACH ROW
BEGIN
    SELECT SQ_BANKTRANSACTION_PK.NEXTVAL INTO :NEW.TRANSACTIONID FROM DUAL;
END;
/
INSERT INTO BANKUSER (USERNAME, USEREMAIL, USERPASSWORD) VALUES ('ADMIN', 'ADMIN@EXAMPLE.COM','P4SSW0RD');
INSERT INTO BANKUSER (USERNAME, USEREMAIL, USERPASSWORD) VALUES ('ADMIN2', 'ADMIN2@EXAMPLE.COM', 'P4SSW0RD2');
INSERT INTO BANKACCOUNT (ACCTBALANCE) VALUES (2000.00);
INSERT INTO BANKACCOUNT (ACCTBALANCE) VALUES(0);

INSERT INTO BANKUSER_BANKACCOUNT VALUES (1, 100000000);
INSERT INTO BANKUSER_BANKACCOUNT VALUES (1, 100000567);
INSERT INTO BANKUSER_BANKACCOUNT VALUES (2, 100000000);
INSERT INTO BANKUSER_BANKACCOUNT VALUES (2, 100000567);


INSERT INTO BANKTRANSACTION (ACCTNUMBER, TRANSACTIONDATE, DESCRIPTION) VALUES (100000000, LOCALTIMESTAMP, 'FIRST EVER TRANSACTION');


SELECT * FROM BANKUSER_BANKACCOUNT;




CREATE OR REPLACE PROCEDURE LINK_NEW_ACCOUNT (UID IN NUMBER, AMOUNT IN NUMBER)
IS 
N NUMBER;
BEGIN
    
    -- INSERTING INTO BANK ACOUNT WHICH CREATES AN ACCOUNT NUMBER THAT ISN'T IN BANKUSER_BANKACCOUNT
    INSERT INTO BANKACCOUNT (ACCTBALANCE) VALUES(AMOUNT);
    
    -- USE THE INFORMATION THAT WE ONLY HAVE THE NUMBER IN BANKACOUNT AND NOT BANKUSER_BANKACCOUNT TO GET THE NEW ACCOUNT NUMBER
    -- THIS IS FUNCTIONAL IF AND ONLY IF THIS IS THE ONLY CALL TO INSERT INTO THE TABLE
    SELECT ACC.ACCTNUMBER
    INTO N
    FROM BANKACCOUNT ACC
    LEFT JOIN BANKUSER_BANKACCOUNT REL
    ON ACC.ACCTNUMBER = REL.ACCTNUMBER
    WHERE REL.ACCTNUMBER IS NULL;
    
     -- LINKING ACCOUNTS
    INSERT INTO BANKUSER_BANKACCOUNT VALUES (UID, N);
    
    COMMIT;
END;



BEGIN
    LINK_NEW_ACCOUNT (2, 500);
END;


SELECT * FROM BANKACCOUNT;
SELECT * FROM BANKUSER_BANKACCOUNT;


COMMIT;