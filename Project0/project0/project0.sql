ALTER TABLE BANK_ACCOUNT
DROP CONSTRAINT FK_BANK_USER;

ALTER TABLE BANK_TRANSACTION
DROP CONSTRAINT FK_BANK_USER_TRANSACTION;

DROP TABLE BANK_USER;
DROP TABLE BANK_ACCOUNT;
DROP TABLE BANK_TRANSACTION;
DROP SEQUENCE SQ_ACCOUNT_PK;
DROP SEQUENCE SQ_TRANSACTION_PK;
/

CREATE TABLE BANK_USER (
    USERNAME VARCHAR2(20) CONSTRAINT PK_USER PRIMARY KEY,
    USER_PASSWORD VARCHAR2(20) NOT NULL
);
/

CREATE TABLE BANK_ACCOUNT (
    ACCOUNT_ID NUMBER(5) CONSTRAINT PK_ACCOUNT PRIMARY KEY,
    BALANCE NUMBER(20,2) DEFAULT 0 CHECK (BALANCE >= 0),
    USERNAME VARCHAR2(20)
);
/


CREATE TABLE BANK_TRANSACTION (
    TRANSACTION_ID NUMBER(5) CONSTRAINT PK_TRANSACTION PRIMARY KEY,
    TRANSACTION_TYPE VARCHAR2(20),
    AMOUNT NUMBER(20,2),
    USERNAME VARCHAR2(20),
    INSERTED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
/

CREATE OR REPLACE PROCEDURE get_balance(a_id IN BANK_ACCOUNT.ACCOUNT_ID%TYPE,
                                        a_balance OUT BANK_ACCOUNT.BALANCE%TYPE)
IS
BEGIN
    SELECT BALANCE INTO a_balance
    FROM BANK_ACCOUNT 
    WHERE ACCOUNT_ID=a_id;
END;
/

CREATE SEQUENCE SQ_ACCOUNT_PK
START WITH 1
INCREMENT BY 1;    
/

CREATE OR REPLACE TRIGGER TR_INSERT_ACCOUNT
BEFORE INSERT ON BANK_ACCOUNT
FOR EACH ROW
BEGIN
    SELECT SQ_ACCOUNT_PK.NEXTVAL INTO :NEW.ACCOUNT_ID FROM DUAL;
END;
/

CREATE SEQUENCE SQ_TRANSACTION_PK
START WITH 1
INCREMENT BY 1;    
/

CREATE OR REPLACE TRIGGER TR_INSERT_TRANSACTION
BEFORE INSERT ON BANK_TRANSACTION
FOR EACH ROW
BEGIN
    SELECT SQ_TRANSACTION_PK.NEXTVAL INTO :NEW.TRANSACTION_ID FROM DUAL;
END;
/

ALTER TABLE BANK_ACCOUNT
ADD CONSTRAINT FK_BANK_USER
FOREIGN KEY (USERNAME) REFERENCES BANK_USER(USERNAME) ON DELETE CASCADE;
/

ALTER TABLE BANK_TRANSACTION
ADD CONSTRAINT FK_BANK_USER_TRANSACTION
FOREIGN KEY (USERNAME) REFERENCES BANK_USER(USERNAME) ON DELETE CASCADE;
/
