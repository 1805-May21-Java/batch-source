--------------------------------------------------
-- CREATING SEQUENCES TO GENERATE OUR PRIMARY KEY VALUES
--------------------------------------------------

CREATE SEQUENCE SQ_DEPARTMENT_PK
START WITH 7
INCREMENT BY 1;

CREATE SEQUENCE SQ_EMPLOYEE_PK
START WITH 21
INCREMENT BY 1;

--DROP SEQUENCE SQ_EMPLOYEE_PK;

CREATE SEQUENCE SQ_LOCATIONS_PK
START WITH 4
INCREMENT BY 1;

--------------------------------------------------
-- CREATING TRIGGERS TO GENERATE OUR PRIMARY KEYS
--------------------------------------------------
CREATE OR REPLACE TRIGGER TR_INSERT_EMPLOYEE
BEFORE INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN
    SELECT SQ_EMPLOYEE_PK.NEXTVAL INTO :NEW.EMP_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TR_INSERT_DEPARTMENT
BEFORE INSERT ON DEPARTMENT
FOR EACH ROW
BEGIN
    SELECT SQ_DEPARTMENT_PK.NEXTVAL INTO :NEW.DEPT_ID FROM DUAL;
END;
/

CREATE OR REPLACE TRIGGER TR_INSERT_LOCATIONS
BEFORE INSERT ON LOCATIONS
FOR EACH ROW
BEGIN
    SELECT SQ_LOCATIONS_PK.NEXTVAL INTO :NEW.LOCATION_ID FROM DUAL;
END;
/
/**
THIS IS A MULTILINE COMMENT
ALSO THERE IS TEXT ON THIS LINE
**/

INSERT INTO EMPLOYEE (EMP_NAME, MONTHLY_SALARY, DEPT_ID, EMP_LOCATION) VALUES ('SAMUEL JACKSON', 3000, 2, 2);

-- CREATE A TRIGGER THAT WILL DELETE ALL CHILD EMPLOYEE RECORDS WHEN A LOCATION IS DELETED
CREATE OR REPLACE TRIGGER LOC_CASCADE_EMP
BEFORE DELETE ON LOCATIONS
FOR EACH ROW
BEGIN
    DELETE FROM EMPLOYEE
    WHERE EMP_LOCATION = :OLD.LOCATION_ID;
END;
/

DELETE FROM LOCATIONS
WHERE LOCATION_ID = 1;

--------------------------------------------------
-- CREATING USER DEFINED FUNCTIONS
--------------------------------------------------
-- HELLO WORLD FUNCTION
CREATE OR REPLACE FUNCTION HELLO
RETURN VARCHAR2
IS
BEGIN
    RETURN 'HELLO WORLD';
END;
/

SET SERVEROUTPUT ON;

BEGIN 
    DBMS_OUTPUT.PUT_LINE(HELLO());
END;

-- CREATE A FUNCTION WHICH SQUARES A VALUE
CREATE OR REPLACE FUNCTION SQUARE(X IN NUMBER)
RETURN NUMBER
IS
BEGIN
    RETURN X*X;
END;
/

CREATE OR REPLACE FUNCTION SQUARE(X IN NUMBER)
RETURN NUMBER
IS
-- INCLUDE ANY DECLARATIONS OF REQUIRED VARIABLES
Y NUMBER;
BEGIN
    Y := X*X;
    RETURN Y;
END;
/

DECLARE
    -- DECLARE ANY NECCESSARY VARIABLES TO USE OUR FUNCTION
    N NUMBER := 5;
BEGIN
    -- CALL OUR FUNCTION
    DBMS_OUTPUT.PUT_LINE(SQUARE(N));
END;
/

SELECT MONTHLY_SALARY, SQUARE(MONTHLY_SALARY)
FROM EMPLOYEE;

SELECT 5 AS X, SQUARE(5) AS "X SQUARED"
FROM DUAL;

-- MAX OF 2 NUMBERS
CREATE OR REPLACE FUNCTION FIND_MAX_NUMBER (X NUMBER, Y NUMBER)
RETURN NUMBER
IS
-- VARIABLE DECLARATIONS
Z NUMBER;
BEGIN
    IF X>Y THEN
    Z := X;
    ELSE
    Z := Y;
    END IF;
    RETURN Z;
END;

DECLARE
FIRST_NUM NUMBER;
SECOND_NUM NUMBER;
MAX_NUM NUMBER;
BEGIN
FIRST_NUM := 12;
SECOND_NUM := 13;
MAX_NUM := FIND_MAX_NUMBER(FIRST_NUM, SECOND_NUM);
DBMS_OUTPUT.PUT_LINE('MAX: '||MAX_NUM);
END;

--------------------------------------------------
-- CREATING STORED PROCEDURES
--------------------------------------------------
-- BASIC FIRST 'HELLO WORLD' PROCEDURE

CREATE OR REPLACE PROCEDURE HELLO_PROCEDURE
IS
BEGIN
    DBMS_OUTPUT.PUT_LINE('HELLO WORLD');
END;

-- INVOKE HELLO WORLD PROCEDURE
BEGIN
    HELLO_PROCEDURE();
END;

-- CREATING A PROCEDURE WITH A CURSOR AS AN OUTPUT PARAMETER
CREATE OR REPLACE PROCEDURE GET_ALL_EMPLOYEES (S OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN S FOR
    SELECT EMP_ID, EMP_NAME FROM EMPLOYEE;
END;
/

DECLARE
    SVAR SYS_REFCURSOR;
    TEMP_ID EMPLOYEE.EMP_ID%TYPE;
    --TEMP_ID NUMBER;
    TEMP_NAME EMPLOYEE.EMP_NAME%TYPE;
BEGIN
    GET_ALL_EMPLOYEES(SVAR);
    LOOP
        FETCH SVAR INTO TEMP_ID, TEMP_NAME;
        EXIT WHEN SVAR%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(TEMP_ID||' IS CURRENT ID, '||TEMP_NAME||' IS CURRENT NAME');
    END LOOP;
    CLOSE SVAR;
END;

