-- CREATING OUR DEPARTMENT  (DDL)
CREATE TABLE DEPARTMENT(
    DEPT_ID NUMBER(5) CONSTRAINT PK_DEPT PRIMARY KEY,
    DEPT_NAME VARCHAR2(50),
    MONTHLY_BUDGET NUMBER(7,2)
);

-- CREATE OUR EMPLOYEE TABLE (DDL)
CREATE TABLE EMPLOYEE (
    EMP_ID NUMBER(5) CONSTRAINT PK_EMP PRIMARY KEY,
    EMP_NAME VARCHAR2(50),
    BIRTHDAY DATE,
    MONTHLY_SALARY NUMBER(7,2) NOT NULL,
    DEPT_ID NUMBER(5) CONSTRAINT FK_EMP_DPT REFERENCES DEPARTMENT,
    HIRE_DATE DATE,
    POSITION VARCHAR2(20),
    MANAGER_ID NUMBER(5)
);

-- INSERTING SOME RECORDS INTO DEPARTMENT TABLE
INSERT INTO DEPARTMENT VALUES (1, 'ACCOUNTING', 2000);
INSERT INTO DEPARTMENT VALUES (2, 'MARKETING', 3000);
INSERT INTO DEPARTMENT VALUES (3, 'INFORMATION TECHNOLOGY', 4000);
-- INSERT INTO DEPARTMENT (DEPT_NAME, MONTHLY_BUDGET) VALUES ('INFORMATION TECHNOLOGY', 4000);
-- COULD LEAVE OUT COLUMNS IF WE HAD DEFAULT VALUES OR GENERATED VALUES
INSERT INTO DEPARTMENT VALUES (4, 'HUMAN RESOURCES', 5000);
INSERT INTO DEPARTMENT VALUES (5, 'LEGAL', 5000);
INSERT INTO DEPARTMENT VALUES (6, 'CUSTOMER SERVICE', 3000);

--USING DDL AGAIN TO CHANGE OUR DATABASE STRUCTURE (REMOVING A CONTRAINT ON A TABLE)
ALTER TABLE EMPLOYEE
DROP CONSTRAINT FK_EMP_DPT;

-- WHILE WE COULD NOT PREVIOUSLY DROP THE DEPARTMENT TABLE, ONCE THE FK WAS REMOVED WE COULD
DROP TABLE DEPARTMENT;

-- WE RECREATED OUR DEPARTMENT TABLE, SO WE MUST ALSO RECREATE OUR RELATIONSHIP
ALTER TABLE EMPLOYEE
ADD CONSTRAINT FK_EMP_DPT
FOREIGN KEY (DEPT_ID) REFERENCES DEPARTMENT(DEPT_ID); -- WILL CREATE OUR RELATIONSHIP AGAIN
/**
WE CAN INCLUDE AN OPTIONAL 'ON DELETE SET NULL' TO ALLOW US TO DELETE DEPARTMENTS, AND WILL SET ANY 
VALUES WHICH REFERENCE THAT DEPARTMENT ENTRY TO NULL

WE CAN ALSO INCLUDE 'ON DELETE CASCADE' AND THIS WILL ALLOW US TO DELETE DEPARTMENTS, AND ALSO 
WILL DELETE ANY CHILD RECORDS WHICH REFERENCE THAT ID
**/
ALTER TABLE EMPLOYEE
ADD CONSTRAINT FK_EMP_DPT
FOREIGN KEY (DEPT_ID) REFERENCES DEPARTMENT(DEPT_ID) ON DELETE CASCADE;

-- INSERT SOME EMPLOYEE RECORDS INTO OUR EMPLOYEE TABLE (DML)
INSERT INTO EMPLOYEE VALUES (1, 'JOHN SMITH', DATE '1994-01-01', 2000, 1, DATE '2015-03-28', 'AC_ACCOUNT', NULL);
INSERT INTO EMPLOYEE VALUES (2, 'JAMES BOSH', DATE '1990-06-14', 3200, 2, DATE '2016-05-28', 'MK_REP', NULL);
INSERT INTO EMPLOYEE VALUES (3, 'LISA JACKSON', DATE '1992-09-08', 3800.00, 3, DATE '2017-02-02', 'IT_PROF', NULL);
INSERT INTO EMPLOYEE VALUES (4, 'ANGELA DEAN', DATE '1986-05-15', 2000.00, 3, DATE '2015-03-28', 'IT_PROF',3);
INSERT INTO EMPLOYEE VALUES (5, 'NIGEL OAKS', DATE '1990-09-24', 2500.00, 2, DATE '2018-01-03', 'MK_REP',2);
INSERT INTO EMPLOYEE VALUES (6, 'JAMES BOND', DATE '1994-11-13', 2800.00, 2, DATE '2017-05-05', 'MK_REP',2);

-- CONTINUING TO USE DML TO DELETE A RECORD
DELETE FROM EMPLOYEE
WHERE MONTHLY_SALARY>3900; -- DELETES JOHN SMITH

-- QUERYING OUR DATABASE USING THE SELECT KEYWORD
SELECT *
FROM EMPLOYEE;

SELECT EMP_NAME
FROM EMPLOYEE;

SELECT EMP_NAME
FROM EMPLOYEE 
WHERE MANAGER_ID=2;

SELECT * 
FROM EMPLOYEE 
WHERE EMP_NAME LIKE 'JAMES%'
ORDER BY MONTHLY_SALARY DESC; -- ORDER BY WILL DEFAULT TO ASC

-- RETURN NUMBER OF EMPLOYEES IN THE TABLE
SELECT COUNT(EMP_ID) AS TOTAL_EMPLOYEES
FROM EMPLOYEE;

-- SHOW AVERAGE SALARY BY DEPARTMENT
SELECT DEPT_ID, ROUND(AVG(MONTHLY_SALARY)) AS AVG_SALARY
FROM EMPLOYEE
GROUP BY DEPT_ID
HAVING DEPT_ID>1;

-- CREATE ANOTHER TABLE FOR EMPLOYEE LOCATIONS
CREATE TABLE LOCATIONS (
    LOCATION_ID NUMBER(5),
    STREET VARCHAR2(25),
    CITY VARCHAR2(25),
    STATE VARCHAR2(2),
    ZIPCODE NUMBER(5)
);

-- INCLUDING THE PRIMARY KEY
ALTER TABLE LOCATIONS
ADD CONSTRAINT PK_LOCATIONS PRIMARY KEY (LOCATION_ID);

-- ADD A COLUMN TO THE EMPLOYEE TABLE TO CREATE A LOCATION FIELD 
ALTER TABLE EMPLOYEE
ADD EMP_LOCATION NUMBER(5);

-- NOW LETS CREATE A FOREIGN KEY RELATIONSHIP BETWEEN THE LOCATION AND EMPLOYEE TABLE
ALTER TABLE EMPLOYEE 
ADD CONSTRAINT FK_EMP_LOCATION
FOREIGN KEY (EMP_LOCATION) REFERENCES LOCATIONS;

-- INSERT SOME LOCATIONS INTO OUR LOCATION TABLE
INSERT INTO LOCATIONS VALUES (1, '14 MAIN ST', 'RESTON', 'VA', 20190);
INSERT INTO LOCATIONS VALUES (2, '960 TCHOUPITOULAS ST', 'NEW ORLEANS', 'LA', 70118);
INSERT INTO LOCATIONS VALUES (3, '200 LOMBARD ST', 'SAN FRANCISCO', 'CA', 94109);

-- ADD MORE DATA TO OUR EMPLOYEE TABLE
INSERT INTO EMPLOYEE VALUES (7, 'JILLIAN KYND', DATE '1980-10-15', 2840.00, 1, DATE '2015-05-11', 'AC_ACCOUNT', 1, 1);
INSERT INTO EMPLOYEE VALUES (8, 'TIM KIBBEL', DATE '1980-05-20', 2240.00, 2, DATE '2014-07-28', 'MK_REP', 2, 1);
INSERT INTO EMPLOYEE VALUES (9, 'ETHELIN COMINI', DATE '1982-06-16', 3380.00, 3, DATE '2017-10-02', 'IT_DEV', 3, 1);
INSERT INTO EMPLOYEE VALUES (10, 'JASE HANDLEY', DATE '1975-10-08', 1870.00, 5, DATE '2017-08-17', 'LG_LAW',11, 1);
INSERT INTO EMPLOYEE VALUES (11, 'ARIEL PAVIS', DATE '1981-09-23', 4500.00, 5, DATE '2015-07-12', 'LG_LAW', NULL, 2);
INSERT INTO EMPLOYEE VALUES (12, 'MELISSA ITZKOVSKY', DATE '1983-03-03', 3870.00, 5, DATE '2014-09-15', 'LG_LAW',11, 2);
INSERT INTO EMPLOYEE VALUES (13, 'MALIA FILISOV', DATE '1976-07-11', 4620.00, 6, DATE '2014-11-09', 'CS_REP', NULL, 2);
INSERT INTO EMPLOYEE VALUES (14, 'BRENDAN LOUISET', DATE '1979-01-21', 3760.00, 6, DATE '2018-03-28', 'CS_REP',13, 2);
INSERT INTO EMPLOYEE VALUES (15, 'MILT KLIEMANN', DATE '1983-02-25', 3820.00, 1, DATE '2016-05-01', 'AC_ACCOUNT', 1, 2);
INSERT INTO EMPLOYEE VALUES (16, 'LUCILLE HUNE', DATE '1994-01-04', 2300.00, 2, DATE '2016-04-17', 'MK_REP',2, 2);
INSERT INTO EMPLOYEE VALUES (17, 'PETA POLTZOLD', DATE '1990-09-24', 2500.00, 3, DATE '2015-07-10', 'IT_DEV',3, 3);
INSERT INTO EMPLOYEE VALUES (18, 'LYDIA POVER', DATE '1991-10-01', 2800.00, 3, DATE '2016-08-03', 'IT_DEV', NULL, 3);
INSERT INTO EMPLOYEE VALUES (19, 'RON WINTERTON', DATE '1977-09-27', 2500.00, 5, DATE '2018-02-23', 'LG_LAW', 11, 3);
INSERT INTO EMPLOYEE VALUES (20, 'NITIN CHESTNUT', DATE '1995-01-18', 2800.00, 6, DATE '2014-10-25', 'CS_REP', 13, 3);

SELECT * 
FROM EMPLOYEE
WHERE DEPT_ID=1 OR DEPT_ID=4 OR DEPT_ID=6;

SELECT * 
FROM EMPLOYEE 
WHERE DEPT_ID IN (1,4,6);


-- WORKING WITH SET OPERATORS
SELECT *
FROM EMPLOYEE 
WHERE DEPT_ID=1
UNION
SELECT *
FROM EMPLOYEE
WHERE EMP_LOCATION=1;

SELECT *
FROM EMPLOYEE
WHERE DEPT_ID=1 OR EMP_LOCATION=1;

-- ANYONE WHO IS IN DEPARTMENT 1 AND LOCATION 1 WILL SHOW UP IN OUR RESULTS TWICE
SELECT *
FROM EMPLOYEE 
WHERE DEPT_ID=1
UNION ALL
SELECT *
FROM EMPLOYEE
WHERE EMP_LOCATION=1;

SELECT *
FROM EMPLOYEE 
WHERE DEPT_ID=1
MINUS
SELECT *
FROM EMPLOYEE
WHERE EMP_LOCATION=1;

SELECT *
FROM EMPLOYEE 
WHERE DEPT_ID=1
INTERSECT
SELECT *
FROM EMPLOYEE
WHERE EMP_LOCATION=1;

-- WORKING WITH JOINS
-- INNER JOIN
SELECT 
    EMPLOYEE.EMP_NAME AS NAME, 
    DEPARTMENT.DEPT_NAME AS DEPARTMENT
FROM EMPLOYEE 
INNER JOIN DEPARTMENT
ON EMPLOYEE.DEPT_ID = DEPARTMENT.DEPT_ID;

-- RIGHT JOIN
SELECT 
    EMPLOYEE.EMP_NAME AS NAME, 
    DEPARTMENT.DEPT_NAME AS DEPARTMENT
FROM EMPLOYEE 
RIGHT OUTER JOIN DEPARTMENT
ON EMPLOYEE.DEPT_ID = DEPARTMENT.DEPT_ID;

-- LEFT JOIN
SELECT 
    EMPLOYEE.EMP_NAME AS NAME, 
    DEPARTMENT.DEPT_NAME AS DEPARTMENT
FROM EMPLOYEE 
LEFT OUTER JOIN DEPARTMENT
ON EMPLOYEE.DEPT_ID = DEPARTMENT.DEPT_ID;
-- IN THIS CASE WE GET THE SAME RESULT AS AN INNER JOIN BECAUSE WE DON'T HAVE ANY EMPLOYEES 
-- WHO DO NOT HAVE A DEPARTMENT

-- CAN "STACK" JOINS, AND JOIN MORE THAN ONE TABLE, QUERYING INFORMATION FROM ALL OF THEM
CREATE VIEW EMPLOYEE_INFO AS
SELECT 
    EMPLOYEE.EMP_NAME NAME,
    DEPARTMENT.DEPT_NAME DEPARTMENT,
    CONCAT(CONCAT(LOCATIONS.CITY,', '), LOCATIONS.STATE) LOCATION
FROM EMPLOYEE 
INNER JOIN DEPARTMENT
ON EMPLOYEE.DEPT_ID = DEPARTMENT.DEPT_ID
INNER JOIN LOCATIONS
ON LOCATIONS.LOCATION_ID = EMPLOYEE.EMP_LOCATION;

-- CAN CREATE A SELF JOIN USING ALIASING
CREATE VIEW MANAGERS AS
SELECT EMP1.EMP_NAME EMPLOYEE, EMP2.EMP_NAME MANAGER
FROM EMPLOYEE EMP1, EMPLOYEE EMP2
WHERE EMP2.EMP_ID = EMP1.MANAGER_ID;


-- USING SUBQUERIES
SELECT *
FROM EMPLOYEE 
WHERE MONTHLY_SALARY = 
    (SELECT MAX(MONTHLY_SALARY)
    FROM EMPLOYEE);
    
SELECT EMP_ID, EMP_NAME, DEPT_ID
FROM EMPLOYEE
WHERE EXISTS
    (SELECT *
    FROM DEPARTMENT 
    WHERE EMPLOYEE.DEPT_ID=2);

