SET SERVEROUTPUT ON;

--Select all records from the Employee table.
SELECT *
FROM CHINOOK.EMPLOYEE;

--Select all records from the Employee table where last name is King.
SELECT *
FROM CHINOOK.EMPLOYEE
WHERE LASTNAME = 'King';

--Select all records from the Employee table where first name is Andrew and REPORTSTO is NULL.
SELECT *
FROM CHINOOK.EMPLOYEE
WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL;

--Select all albums in Album table and sort result set in descending order by title.
SELECT TITLE
FROM CHINOOK.ALBUM
ORDER BY TITLE DESC;

--Select first name from Customer and sort result set in ascending order by city
SELECT FIRSTNAME, CITY
FROM CHINOOK.CUSTOMER
ORDER BY CITY ASC;

--Insert two new records into Genre table 
INSERT INTO CHINOOK.GENRE VALUES (26, 'House');
INSERT INTO CHINOOK.GENRE VALUES (27, 'Country');

--Insert two new records into Employee table
INSERT INTO CHINOOK.EMPLOYEE (EMPLOYEEID, LASTNAME, FIRSTNAME, TITLE, REPORTSTO) VALUES (9, 'Lamar', 'Kendrick', 'Associate', 1);
INSERT INTO CHINOOK.EMPLOYEE (EMPLOYEEID, LASTNAME, FIRSTNAME, TITLE, REPORTSTO) VALUES (10, 'Bennett', 'Chancellor', 'Associate', 1);

--Insert two new records into Customer table
INSERT INTO CHINOOK.CUSTOMER (CUSTOMERID, LASTNAME, FIRSTNAME, EMAIL, SUPPORTREPID) VALUES (60, 'Schryber', 'Jack', 'schreebs@gmail.com', 3);
INSERT INTO CHINOOK.CUSTOMER (CUSTOMERID, LASTNAME, FIRSTNAME, EMAIL, SUPPORTREPID) VALUES (61, 'Greer', 'Drake', 'drakums@aol.com', 4);

COMMIT;

--Update Aaron Mitchell in Customer table to Robert Walter
UPDATE CHINOOK.CUSTOMER SET FIRSTNAME = 'Robert', LASTNAME = 'Walter'
WHERE CUSTOMERID = 32;

--Update name of artist in the Artist table “Creedence Clearwater Revival” to “CCR”
UPDATE CHINOOK.ARTIST SET NAME = 'CCR'
WHERE ARTISTID = 76;

--Select all invoices with a billing address like “T%”
SELECT *
FROM CHINOOK.INVOICE
WHERE BILLINGADDRESS LIKE 'T%';

--Select all invoices that have a total between 15 and 50
SELECT *
FROM CHINOOK.INVOICE
WHERE TOTAL BETWEEN 15 AND 50;

--Select all employees hired between 1st of June 2003 and 1st of March 2004
SELECT *
FROM CHINOOK.EMPLOYEE
WHERE HIREDATE BETWEEN '01-JUN-03' AND '01-MAR-04';

--Delete a record in Customer table where the name is Robert Walter (There may be constraints that rely on this, find out how to resolve them).	

CREATE OR REPLACE TRIGGER CUSTOMER_DELETE_INVOICE
BEFORE DELETE ON CHINOOK.CUSTOMER
FOR EACH ROW
BEGIN
    UPDATE CHINOOK.INVOICE SET CUSTOMERID = NULL;
END;

DROP TRIGGER CUSTOMER_DELETE_INVOICE;

--ALTER TABLE CHINOOK.INVOICE
--DROP CONSTRAINT FK_INVOICECUSTOMERID;

DELETE FROM CHINOOK.CUSTOMER
WHERE FIRSTNAME ='Robert' AND LASTNAME = 'Walter';


--3.1 System Defined Functions
--Create a function that returns the current time.
CREATE OR REPLACE FUNCTION SHOW_TIME
RETURN TIMESTAMP
IS
BEGIN
    RETURN CURRENT_TIMESTAMP();
END;

BEGIN
    DBMS_OUTPUT.PUT_LINE(CURRENT_TIMESTAMP());
END;

--Create a function that returns the length of name in MEDIATYPE table
CREATE OR REPLACE FUNCTION MEDIATYPE_LENGTH(INPUT_ID CHINOOK.MEDIATYPE.MEDIATYPEID%TYPE)
RETURN NUMBER
IS
NAME CHINOOK.MEDIATYPE.NAME%TYPE;
P NUMBER;
BEGIN
    SELECT CHINOOK.MEDIATYPE.NAME INTO NAME
    FROM CHINOOK.MEDIATYPE
    WHERE CHINOOK.MEDIATYPE.MEDIATYPEID = INPUT_ID;
    P := LENGTH(NAME);
    RETURN P;
END;

BEGIN
    DBMS_OUTPUT.PUT_LINE(MEDIATYPE_LENGTH(1));
END;

--3.2 System Defined Aggregate Functions
--Create a function that returns the average total of all invoices 
CREATE OR REPLACE FUNCTION INVOICE_AVERAGE
RETURN NUMBER
IS
INVOICE_AVG NUMBER;
BEGIN
    SELECT AVG(CHINOOK.INVOICE.TOTAL) INTO INVOICE_AVG
    FROM CHINOOK.INVOICE;
    RETURN INVOICE_AVG;
END;

BEGIN
    DBMS_OUTPUT.PUT_LINE(INVOICE_AVERAGE);
END;

--Create a function that returns the most expensive track
CREATE OR REPLACE FUNCTION MOST_EXPENSIVE_TRACK
RETURN VARCHAR
IS
TEMP_NAME VARCHAR2(50);
BEGIN
    SELECT NAME INTO TEMP_NAME FROM
    (SELECT * FROM CHINOOK.TRACK WHERE UNITPRICE =
    (SELECT MAX(UNITPRICE) FROM CHINOOK.TRACK))
    OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY;
    RETURN TEMP_NAME;
END;

BEGIN
    DBMS_OUTPUT.PUT_LINE(MOST_EXPENSIVE_TRACK);
END;

--3.3 User Defined Scalar Functions
--Create a function that returns the average price of invoiceline items in the invoiceline table
CREATE OR REPLACE FUNCTION INVOICELINE_AVG
RETURN NUMBER
IS
INVOICELINE_AVG NUMBER;
BEGIN
    SELECT AVG(CHINOOK.INVOICELINE.UNITPRICE) INTO INVOICELINE_AVG
    FROM CHINOOK.INVOICELINE;
    RETURN INVOICELINE_AVG;
END;

BEGIN
    DBMS_OUTPUT.PUT_LINE(INVOICELINE_AVG);
END;

--3.4 User Defined Table Valued Functions
--Create a function that returns all employees who are born after 1968.
CREATE OR REPLACE FUNCTION EMPLOYEES_AFTER_1968
RETURN SYS_REFCURSOR
IS
S SYS_REFCURSOR;
BEGIN
    OPEN S FOR SELECT * FROM CHINOOK.EMPLOYEE WHERE BIRTHDATE > DATE '1968-12-31';
    RETURN S;    
END;

DECLARE
    SVAR SYS_REFCURSOR;
    TEMP_FIRSTNAME CHINOOK.EMPLOYEE.FIRSTNAME%TYPE;
    TEMP_LASTNAME CHINOOK.EMPLOYEE.LASTNAME%TYPE;
    TEMP_EMPLOYEEID CHINOOK.EMPLOYEE.EMPLOYEEID%TYPE;
    TEMP_TITLE CHINOOK.EMPLOYEE.TITLE%TYPE;
BEGIN
    EMPLOYEES_AFTER_1968(SVAR);
    LOOP
        FETCH SVAR INTO TEMP_FIRSTNAME, TEMP_LASTNAME, TEMP_EMPLOYEEID, TEMP_TITLE;
        EXIT WHEN SVAR%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(TEMP_EMPLOYEEID||' '||TEMP_FIRSTNAME||' '||TEMP_LASTNAME||' ' ||TEMP_TITLE||' ');
    END LOOP;
    CLOSE SVAR;
END;

--4.1 Basic Stored Procedure
--Create a stored procedure that selects the first and last names of all the employees.
CREATE OR REPLACE PROCEDURE GET_EMP_NAMES (S OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN S FOR
    SELECT CHINOOK.EMPLOYEE.FIRSTNAME, CHINOOK.EMPLOYEE.LASTNAME FROM CHINOOK.EMPLOYEE;
END;

DECLARE
    SVAR SYS_REFCURSOR;
    TEMP_FIRSTNAME CHINOOK.EMPLOYEE.FIRSTNAME%TYPE;
    TEMP_LASTNAME CHINOOK.EMPLOYEE.LASTNAME%TYPE;
BEGIN
    GET_EMP_NAMES(SVAR);
    LOOP
        FETCH SVAR INTO TEMP_FIRSTNAME, TEMP_LASTNAME;
        EXIT WHEN SVAR%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(TEMP_FIRSTNAME ||' '||TEMP_LASTNAME||' ');
    END LOOP;
    CLOSE SVAR;
END;

--4.2 Stored Procedure Input Parameters
--Create a stored procedure that updates the personal information of an employee.
CREATE OR REPLACE PROCEDURE UPDATE_EMPLOYEE(
	   EMPLOYEEID IN CHINOOK.EMPLOYEE.EMPLOYEEID%TYPE,
	   N_FIRSTNAME IN CHINOOK.EMPLOYEE.FIRSTNAME%TYPE,
       N_LASTNAME IN CHINOOK.EMPLOYEE.LASTNAME%TYPE,
       N_BIRTHDATE IN CHINOOK.EMPLOYEE.BIRTHDATE%TYPE,
       N_ADDRESS IN CHINOOK.EMPLOYEE.ADDRESS%TYPE,
       N_CITY IN CHINOOK.EMPLOYEE.CITY%TYPE,
       N_STATE IN CHINOOK.EMPLOYEE.STATE%TYPE,
       N_COUNTRY IN CHINOOK.EMPLOYEE.COUNTRY%TYPE,
       N_POSTAL_CODE IN CHINOOK.EMPLOYEE.POSTALCODE%TYPE)
IS
BEGIN
  UPDATE CHINOOK.EMPLOYEE SET
    LASTNAME = N_LASTNAME, FIRSTNAME = N_FIRSTNAME,
    BIRTHDATE = N_BIRTHDATE, ADDRESS = N_ADDRESS,
    CITY = N_CITY, STATE = N_STATE,
    COUNTRY = N_COUNTRY, POSTALCODE = N_POSTAL_CODE
    WHERE EMPLOYEEID = EMPLOYEEID;
  COMMIT;
END;

BEGIN
   UPDATE_EMPLOYEE(9,'KDOT', 'LLAMA', '29-MAY-87', '123 ABC STREET', 'HENDERSON', 'NORTH CAROLINA', 'USA', 28035 );
END;

--Create a stored procedure that returns the managers of an employee.
CREATE OR REPLACE PROCEDURE FIND_MANAGER(
EMPID IN CHINOOK.EMPLOYEE.EMPLOYEEID%TYPE, MANAGER_NAME OUT VARCHAR)
IS
TEMP_NUM CHINOOK.EMPLOYEE.EMPLOYEEID%TYPE;
TEMP_FIRST CHINOOK.EMPLOYEE.FIRSTNAME%TYPE;
TEMP_LAST CHINOOK.EMPLOYEE.LASTNAME%TYPE;
BEGIN
    SELECT REPORTSTO INTO TEMP_NUM FROM CHINOOK.EMPLOYEE
    WHERE EMPLOYEEID = EMPID;
    SELECT FIRSTNAME, LASTNAME INTO TEMP_FIRST, TEMP_LAST FROM CHINOOK.EMPLOYEE
    WHERE EMPLOYEEID = TEMP_NUM;
    MANAGER_NAME := (TEMP_FIRST|| ' ' ||TEMP_LAST);
    DBMS_OUTPUT.PUT_LINE(MANAGER_NAME);
END;

DECLARE
MANAGER_NAME CHINOOK.EMPLOYEE.FIRSTNAME%TYPE;
BEGIN
    FIND_MANAGER(3, MANAGER_NAME);
END;

--4.3 Stored Procedure Output Parameters
--Create a stored procedure that returns the name and company of a customer.
CREATE OR REPLACE PROCEDURE RETRIEVE_CUSTOMER(CUST_ID IN CHINOOK.CUSTOMER.CUSTOMERID%TYPE, CUST_NAME OUT VARCHAR, 
CUST_COMPANY OUT CHINOOK.CUSTOMER.COMPANY%TYPE)
IS
TEMP_FIRST CHINOOK.CUSTOMER.FIRSTNAME%TYPE;
TEMP_LAST CHINOOK.CUSTOMER.LASTNAME%TYPE;
BEGIN
    SELECT CHINOOK.CUSTOMER.FIRSTNAME, CHINOOK.CUSTOMER.LASTNAME, CHINOOK.CUSTOMER.COMPANY INTO TEMP_FIRST, TEMP_LAST, CUST_COMPANY
    FROM CHINOOK.CUSTOMER WHERE CUSTOMERID = CUST_ID;
    CUST_NAME := (TEMP_FIRST|| ' ' ||TEMP_LAST);
    DBMS_OUTPUT.PUT_LINE(CUST_NAME|| ' ' ||CUST_COMPANY);
END;

DECLARE
CUST_NAME CHINOOK.CUSTOMER.FIRSTNAME%TYPE;
CUST_COMPANY CHINOOK.CUSTOMER.COMPANY%TYPE;
BEGIN
    RETRIEVE_CUSTOMER(1, CUST_NAME, CUST_COMPANY);
END;

--5.0 Transactions
--Create a transaction that given a invoiceId will delete that invoice (There may be constraints that rely on this, find out how to resolve them).
START TRANSACTION;
    DELETE FROM CHINOOK.INVOICE
    WHERE INVOICEID = /*INSERT INVOICEID HERE]*/;
COMMIT;

--Create a transaction nested within a stored procedure that inserts a new record in the Customer table
CREATE OR REPLACE PROCEDURE INSERT_CUSTOMER(
EMPLOYEEID CHINOOK.CUSTOMER.CUSTOMERID%TYPE,
FIRSTNAME CHINOOK.CUSTOMER.FIRSTNAME%TYPE,
LASTNAME CHINOOK.CUSTOMER.LASTNAME%TYPE,
COMPANY CHINOOK.CUSTOMER.COMPANY%TYPE,
ADDRESS CHINOOK.CUSTOMER.ADDRESS%TYPE,
CITY CHINOOK.CUSTOMER.CITY%TYPE,
STATE CHINOOK.CUSTOMER.STATE%TYPE,
COUNTRY CHINOOK.CUSTOMER.COUNTRY%TYPE,
POSTALCODE CHINOOK.CUSTOMER.POSTALCODE%TYPE,
PHONENUMBER CHINOOK.CUSTOMER.PHONE%TYPE,
FAXNUMBER CHINOOK.CUSTOMER.FAX%TYPE,
EMAIL CHINOOK.CUSTOMER.EMAIL%TYPE,
SUPPORTID CHINOOK.CUSTOMER.SUPPORTREPID%TYPE)
IS
BEGIN
    INSERT INTO CHINOOK.CUSTOMER VALUES(EMPLOYEEID, FIRSTNAME,
    LASTNAME, COMPANY, ADDRESS, CITY, STATE,
    COUNTRY, POSTALCODE, PHONENUMBER, FAXNUMBER,
    EMAIL, SUPPORTID);
    COMMIT;
END;

--6.0 Triggers
--6.1 AFTER/FOR
--Create an after insert trigger on the employee table fired after a new record is inserted into the table.
CREATE OR REPLACE TRIGGER TR_INSERT_CHINOOKEMPLOYEE
AFTER INSERT ON CHINOOK.EMPLOYEE
FOR EACH ROW
BEGIN
    UPDATE CHINOOK.EMPLOYEE SET TITLE = 'Associate';
END;

--Create an after update trigger on the album table that fires after a row is inserted in the table
CREATE OR REPLACE TRIGGER TR_INSERT_CHINOOKALBUM
AFTER INSERT ON CHINOOK.ALBUM
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('New album inserted!');
END;

--Create an after delete trigger on the customer table that fires after a row is deleted from the table.
CREATE OR REPLACE TRIGGER TR_DELETE_CHINOOKCUSTOMER
AFTER DELETE ON CHINOOK.CUSTOMER
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('Customer has been deleted');
END;

--7.0 JOINS
--7.1 INNER
--Create an inner join that joins customers and orders and specifies the name of the customer and the invoiceId.
SELECT CHINOOK.CUSTOMER.FIRSTNAME, CHINOOK.CUSTOMER.LASTNAME, INVOICEID
FROM CHINOOK.CUSTOMER
INNER JOIN CHINOOK.INVOICE ON CHINOOK.CUSTOMER.CUSTOMERID = CHINOOK.INVOICE.CUSTOMERID;

--7.2 OUTER
--Create an outer join that joins the customer and invoice table, specifying the CustomerId, firstname, lastname, invoiceId, and total.
SELECT CHINOOK.CUSTOMER.CUSTOMERID, CHINOOK.CUSTOMER.FIRSTNAME, CHINOOK.CUSTOMER.LASTNAME, INVOICEID, TOTAL
FROM CHINOOK.CUSTOMER
FULL OUTER JOIN CHINOOK.INVOICE ON CHINOOK.CUSTOMER.CUSTOMERID = CHINOOK.INVOICE.CUSTOMERID;

--7.3 RIGHT
--Create a right join that joins album and artist specifying artist name and title.
SELECT CHINOOK.ALBUM.TITLE, CHINOOK.ARTIST.NAME
FROM CHINOOK.ALBUM
RIGHT JOIN CHINOOK.ARTIST ON CHINOOK.ARTIST.ARTISTID = CHINOOK.ALBUM.ARTISTID;


--7.4 CROSS
--Create a cross join that joins album and artist and sorts by artist name in ascending order.

SELECT CHINOOK.ALBUM.TITLE, CHINOOK.ARTIST.NAME
FROM CHINOOK.ALBUM
CROSS JOIN CHINOOK.ARTIST
WHERE CHINOOK.ALBUM.ARTISTID = CHINOOK.ARTIST.ARTISTID
ORDER BY CHINOOK.ARTIST.NAME ASC;

--7.5 SELF
--Perform a self-join on the employee table, joining on the reportsto column.

SELECT T1.FIRSTNAME, T1.LASTNAME, T1.EMPLOYEEID, T1.REPORTSTO
FROM CHINOOK.EMPLOYEE T1, CHINOOK.EMPLOYEE T2
WHERE T1.REPORTSTO = T2.EMPLOYEEID;







