 -- 2.1 USESING SELECT COMMAND
 
 SELECT * FROM CHINOOK.EMPLOYEE;-- DISPLAY ALL DATA IN THE TABLE

 SELECT * FROM CHINOOK.EMPLOYEE -- DISPLAY ON THE EMPLOYEE WHO HAS LAST NAME KING
 WHERE LASTNAME = 'King';
 
 SELECT * FROM CHINOOK.EMPLOYEE 
 WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL;
 
 -- 2.2 ORDER BY FOR SORTING RESULT
 SELECT TITLE  FROM CHINOOK.ALBUM 
  ORDER BY TITLE ASC;
  
  SELECT FIRSTNAME FROM CHINOOK.CUSTOMER
  ORDER BY CITY ASC;
  -- 2.3 INSERT IN TO 
  SELECT * FROM CHINOOK.GENRE;
  INSERT INTO CHINOOK.GENRE VALUES(26, 'FOLK');
  INSERT INTO CHINOOK.GENRE VALUES(27, 'ROCK');
  
  -- 2.4 UPDATE -QUESTION TO BE ASKED
    SELECT * FROM CHINOOK.CUSTOMER;
    UPDATE CHINOOK.CUSTOMER
    SET FIRSTNAME = 'Robert' , LASTNAME = 'Walter' 
    WHERE CUSTOMERID =32;
    
    SELECT * FROM CHINOOK.ARTIST;
    UPDATE CHINOOK.ARTIST 
    SET NAME = 'CCR'
    WHERE ARTISTID = 76;
    
    --2.5 USING LIKE
    SELECT * FROM CHINOOK.INVOICE
    WHERE BILLINGADDRESS LIKE 'T%';
    
    --2.6 BETWEEN AND COUNT. BUT QUESTION TO BE ASKED...
    SELECT *  FROM CHINOOK.INVOICE WHERE   TOTAL  BETWEEN 15 AND 50;
    
    SELECT * FROM CHINOOK.EMPLOYEE WHERE HIREDATE BETWEEN '01-JUN-03'AND  '01-MARCH-04';
    
  --  2.7 DELETE
  ALTER TABLE CHINOOK.INVOICE
  DROP CONSTRAINT FK_INVOICECUSTOMERID ; -- DELETE THE CONSTRAINT REFERENCING TO THE CUSTOMER TABLE
   DELETE FROM CHINOOK.CUSTOMER WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter';
    SELECT * FROM CHINOOK.CUSTOMER;-- DISPLAY RESULT SET AFTER DELETING MENTIONED CUSTOMER.
    
    --3 SQL FUNCTIONS
-- 3.1 SYSTEM DEFINED FUNCTIONS
  CREATE OR REPLACE FUNCTION GETTIME 
  RETURN TIMESTAMP
  IS 
   CURRENTTIME TIMESTAMP;
  BEGIN
   SELECT CURRENT_TIMESTAMP  INTO CURRENTTIME FROM DUAL; 
  RETURN CURRENTTIME;
  END;
  /
 -- ALLOWS TO PRINT IN THE CONSOLE
  BEGIN 
     DBMS_OUTPUT.PUT_LINE(GETTIME());
  END;
  
   SET SERVEROUTPUT ON;
   
    -- FUNCTION TO GET LENGTH FROM THE TABLE
    SELECT CURRENT_TIMESTAMP FROM DUAL;-- GIVES CURRENT TIME
    
   SELECT LENGTH(NAME) FROM CHINOOK.MEDIATYPE; -- GIVES LENGTH OF THE NAME IN THE TABLE
   
    -- 3.2 USING AGGREGATE FUNCTION
    SELECT * FROM CHINOOK.INVOICE;
    SELECT AVG(TOTAL)FROM CHINOOK.INVOICE;
    -- FINDING THE TRACK OF EXPENSIVE PRICE 
    SELECT * FROM CHINOOK.TRACK WHERE UNITPRICE = (
    SELECT MAX(UNITPRICE) FROM CHINOOK.TRACK) AND BYTES = (
    SELECT MAX(BYTES) FROM CHINOOK.TRACK);
    
    --3.3 CREATE FUNCTION RETURNS THE AVERAGE PRICE INVOICELINE ITEMS FROM THE INVOICELINE TABLE
    
   -- SELECT * FROM CHINOOK.INVOICELINE; -- DISPLAY THE TABLE
     CREATE OR REPLACE FUNCTION CHINOOK.AVERAGE_PRICE
     RETURN NUMBER
     IS 
      PRICE NUMBER;
     BEGIN 
      SELECT AVG(UNITPRICE) INTO PRICE  FROM CHINOOK.INVOICELINE;
  
       RETURN PRICE;
     
     END AVERAGE_PRICE;
     /
    SET SERVEROUTPUT ON;
  DECLARE PRICE NUMBER;
  BEGIN
     PRICE := CHINOOK.AVERAGE_PRICE();
     DBMS_OUTPUT.PUT_LINE(PRICE);
   END;
   -- 3.4 CREATE FUNCTION TO FIND OUT THE EMPLOYEE BORN AFTER 1968
 CREATE OR REPLACE FUNCTION AGED_EMPLOYEE
 RETURN SYS_REFCURSOR
 IS
     CURS SYS_REFCURSOR;       
 BEGIN
    OPEN CURS FOR
     SELECT FIRSTNAME, LASTNAME
    FROM chinook.employee
    WHERE birthdate > '01-DEC-1968';
    RETURN CURS;
 END;
 
   
 -- 4.1 creating stored procedure to select firstname and lastname of the employee; 
 -- STORED PROCEDURE
 SELECT * FROM CHINOOK.EMPLOYEE;
SET SERVEROUTPUT ON;
 CREATE OR REPLACE PROCEDURE SORTEMPLOYEEBYNAME
 
 AS
 
 BEGIN
  SELECT INTO FIRSTNAME, LASTNAME FROM CHINOOK.EMPLOYEE;
 END;
 
 -- 4.2
 CREATE OR REPLACE PROCEDURE CHINOOK.UPADATE( EMPLOYEENAME VARCHAR2)
IS
BEGIN
    UPDATE CHINOOK.EMPLOYEE SET TITLE = 'POSITION' WHERE FIRSTNAME = EMPLOYEENAME;
END;
 
 
--4.3 
CREATE OR  REPLACE PROCEDURE COMPANY_DETAIL(SYS OUT REFCURSOR)

AS 
BEGIN

OPEN SYS FOR
SELECT NAME, COMPANY FROM CHINOOK.CUSTOMER

END;

 -- 5 TRANSACTION
    -- part1
    CREATE OR REPLACE PROCEDURE CHINOOK.DELETE(DELETEINVOICE IN NUMBER )
    AS
  BEGIN
    DELETE FROM CHINOOK.INVOICE
    WHERE INVOICEID = DELETEINVOICE_INVOICE_ID;
    COMMIT;
   
-- part2
 CREATE PROCEDURE INSERT_CUSTOMER(CUSTOMERID NUMBER(10),CUSTOMER_FIRSTNAME VARCHAR2(20),CUSTOMER_LASTNAME VARCHAR2(20),CUSTMER_ORDER VARCHAR(4))
 AS
 BEGIN
     INSERT INTO CHINOOK.CUSTOMER(CUSTOMERID,FIRSTNAME,LASTNAME, ORDER)
      VALUES(CUSTOMERID, CUSTOMER_FIRSTNAME,CUSTOMER_LASTNAME, CUSTOMER_ORDER
END;


   
   --6. WORKING WITH TRIGGERS
   -- AFTER/FOR 
CREATE OR REPLACE TRIGGER INSERT_TRIGGER AFTER
    INSERT ON CHINOOK.EMPLOYEE
    FOR EACH ROW
    BEGIN 
    DBMS_OUTPUT.PUT_LINE('EMPLOYEE INSERT');
    
    END;
    -- UPDATE TRIGGER
    CREATE OR REPLACE TRIGGER UPDATE_CUSTOMER_TRIGGER
 AFTER UPDATE ON CHINOOK.CUSTOMER
 FOR EACH ROW
 BEGIN
     DBMS_OUTPUT.PUT_LINE('Updated CUSTOMER.');
 END;
 -- DELETE TRIGGER
 CREATE OR REPLACE TRIGGER DELETE_TRIGGER AFTER
    INSERT ON CHINOOK.EMPLOYEE
    FOR EACH ROW
    
    BEGIN 
    DBMS_OUTPUT.PUT_LINE('DELETED ');
 END;
 
 
   
   -- 7 WORKING WITH JOINS
   
   --7.1 INNER JOIN
   
 SELECT 
   CHINOOK.CUSTOMER.FIRSTNAME,
    CHINOOK.INVOICE.INVOICEID
FROM CHINOOK.CUSTOMER
INNER JOIN CHINOOK.INVOICE    
ON CHINOOK.CUSTOMER.CUSTOMERID = CHINOOK.INVOICE.CUSTOMERID; 
 -- 7.2 OUTER JOIN
 
 SELECT 
    CHINOOK.CUSTOMER.CUSTOMERID,
    CHINOOK.CUSTOMER.FIRSTNAME,
    CHINOOK.CUSTOMER.LASTNAME,
    CHINOOK.INVOICE.INVOICEID,
    CHINOOK.INVOICE.TOTAL
FROM CHINOOK.CUSTOMER
FULL OUTER JOIN CHINOOK.INVOICE    
ON CHINOOK.CUSTOMER.CUSTOMERID = CHINOOK.INVOICE.CUSTOMERID; 

 
  --7.3  RIGHT JOIN
   
   SELECT NAME, TITLE
 FROM CHINOOK.ALBUM
 RIGHT JOIN CHINOOK.ARTIST
 ON CHINOOK.ARTIST.ARTISTID=CHINOOK.ALBUM.ARTISTID;

   --7.4 CROSS JOIN
   SELECT NAME FROM CHINOOK.ALBUM CROSS JOIN CHINOOK.ARTIST ORDER BY NAME;
   
   -- 7.5 
   SELECT A.FIRSTNAME AS FNAME, A.LASTNAME AS LNAME, B.FIRSTNAME AS FNAME, B.LASTNAME AS LNAME
 FROM CHINOOK.EMPLOYEE A, CHINOOK.EMPLOYEE B
 WHERE A.REPORTSTO=B.EMPLOYEEID; 
    
   
   
   
 