-- 2.1
SELECT * 
FROM CHINOOK.EMPLOYEE;

SELECT *
FROM CHINOOK.EMPLOYEE
WHERE CHINOOK.EMPLOYEE.LASTNAME='King';

SELECT *
FROM CHINOOK.EMPLOYEE
WHERE CHINOOK.EMPLOYEE.FIRSTNAME='Andrew' and CHINOOK.EMPLOYEE.REPORTSTO IS null;



-- 2.2
SELECT *
FROM CHINOOK.ALBUM
ORDER BY CHINOOK.ALBUM.TITLE DESC;

SELECT CHINOOK.CUSTOMER.FIRSTNAME
FROM CHINOOK.CUSTOMER
ORDER BY CHINOOK.CUSTOMER.CITY;




-- 2.3
INSERT INTO CHINOOK.GENRE VALUES(26, 'Folk');
INSERT INTO CHINOOK.GENRE VALUES(27, 'Americana');

INSERT INTO CHINOOK.EMPLOYEE VALUES(9,'Costigan','Nick','Back-end Web Developer',1,'10-MAY-87','21-MAY-18','25 Anan Wade Road','North Scituate','RI','USA',52857,'(401)555-5555','(401)568-5555','nick.costigan@gmail.com');
INSERT INTO CHINOOK.EMPLOYEE VALUES(10,'Costigan','Katie','Assistant professor',1,'17-APRIL-86','28-JULY-14','37 Main Street','Abbeville','LA','USA',70510,'(401)241-5555','(401)555-0426','katie.costigan@gmail.com');

INSERT INTO CHINOOK.CUSTOMER VALUES(60,'Nicholas','Costigan','Revature','25 Anan Wade Road','North Scituate','RI','USA',52857,'(401)555-5555','(401)568-5555','nick.costigan@gmail.com',3);
INSERT INTO CHINOOK.CUSTOMER VALUES(61,'Katie','Costigan','University of Louisiana','37 Main Street','Abbeville','LA','USA',70510,'(401)241-5555','(401)555-0426','katie.costigan@gmail.com',5);





-- 2.4

UPDATE CHINOOK.CUSTOMER
SET CHINOOK.CUSTOMER.FIRSTNAME='Robert',CHINOOK.CUSTOMER.LASTNAME='Walter'
WHERE CHINOOK.CUSTOMER.FIRSTNAME='Aaron' and CHINOOK.CUSTOMER.LASTNAME='Mitchell';

UPDATE CHINOOK.ARTIST
SET CHINOOK.ARTIST.NAME='CCR'
WHERE CHINOOK.ARTIST.NAME='Creedence Clearwater Revival';





-- 2.5

SELECT *
FROM CHINOOK.INVOICE
WHERE CHINOOK.INVOICE.BILLINGADDRESS LIKE 'T%';






-- 2.6

SELECT *
FROM CHINOOK.INVOICE
WHERE CHINOOK.INVOICE.TOTAL BETWEEN 15 AND 50;

SELECT *
FROM CHINOOK.EMPLOYEE
WHERE CHINOOK.EMPLOYEE.HIREDATE BETWEEN TO_DATE('01/06/2003','DD/MM/YYYY') AND TO_DATE('01/03/2004','DD/MM/YYYY');






-- 2.7

ALTER TABLE CHINOOK.INVOICE
DROP CONSTRAINT FK_INVOICECUSTOMERID;

ALTER TABLE CHINOOK.INVOICE
ADD CONSTRAINT FK_INVOICECUSTOMERID
FOREIGN KEY (CUSTOMERID) REFERENCES CHINOOK.CUSTOMER(CUSTOMERID)
ON DELETE CASCADE;

ALTER TABLE CHINOOK.INVOICELINE
DROP CONSTRAINT FK_INVOICELINEINVOICEID;

ALTER TABLE CHINOOK.INVOICELINE
ADD CONSTRAINT FK_INVOICELINEINVOICEID
FOREIGN KEY (INVOICEID) REFERENCES CHINOOK.INVOICE(INVOICEID)
ON DELETE CASCADE;

DELETE FROM CHINOOK.CUSTOMER
WHERE CHINOOK.CUSTOMER.FIRSTNAME='Robert' AND CHINOOK.CUSTOMER.LASTNAME='Walter';





-- 3.1 Part 1
SET SERVEROUTPUT ON;

CREATE OR REPLACE FUNCTION GET_CURRENT_TIME
RETURN VARCHAR2
IS 
CURRENT_TIME VARCHAR2(11);
BEGIN
  SELECT TO_CHAR(CURRENT_DATE, 'HH:MI:SS AM') INTO CURRENT_TIME
  FROM DUAL;
  RETURN CURRENT_TIME;
END;
/

BEGIN
    DBMS_OUTPUT.PUT_LINE('The current time is: '||GET_CURRENT_TIME);
END;





-- 3.1 Part 2

CREATE OR REPLACE FUNCTION GET_MEDIATYPENAME_LENGTH(INPUT_ID CHINOOK.MEDIATYPE.MEDIATYPEID%TYPE)
RETURN NUMBER
IS
MEDIATYPENAME_LENGTH NUMBER;
BEGIN
    SELECT LENGTH(CHINOOK.MEDIATYPE.NAME) INTO MEDIATYPENAME_LENGTH
    FROM CHINOOK.MEDIATYPE
    WHERE CHINOOK.MEDIATYPE.MEDIATYPEID=INPUT_ID;
    RETURN MEDIATYPENAME_LENGTH;
END;
/

BEGIN
    DBMS_OUTPUT.PUT_LINE(GET_MEDIATYPENAME_LENGTH(3));
END;




-- 3.2 PART 1

CREATE OR REPLACE FUNCTION AVERAGE_TOTAL_INVOICES
RETURN NUMBER
IS
AVERAGE CHINOOK.INVOICE.TOTAL%TYPE;
BEGIN
    SELECT AVG(CHINOOK.INVOICE.TOTAL) INTO AVERAGE
    FROM CHINOOK.INVOICE;
    RETURN AVERAGE;
END;
/

BEGIN
    DBMS_OUTPUT.PUT_LINE(AVERAGE_TOTAL_INVOICES);
END;






-- 3.2 PART 2

CREATE OR REPLACE FUNCTION MAX_TRACK
RETURN CHINOOK.TRACK.UNITPRICE%TYPE
IS
MAX_TRACK CHINOOK.TRACK.UNITPRICE%TYPE;
BEGIN
    SELECT MAX(CHINOOK.TRACK.UNITPRICE) INTO MAX_TRACK
    FROM CHINOOK.TRACK;
    RETURN MAX_TRACK;
END;
/

BEGIN
    DBMS_OUTPUT.PUT_LINE('The most expensive track costs '||MAX_TRACK);
END;






-- 3.3

CREATE OR REPLACE FUNCTION AVG_PRICE_INVOICELINE_ITEMS
RETURN CHINOOK.INVOICELINE.UNITPRICE%TYPE
IS
AVERAGE_PRICE CHINOOK.INVOICELINE.UNITPRICE%TYPE;
BEGIN
    SELECT AVG(CHINOOK.INVOICELINE.UNITPRICE) INTO AVERAGE_PRICE
    FROM CHINOOK.INVOICELINE;
    RETURN AVERAGE_PRICE;
END;
/

BEGIN
    DBMS_OUTPUT.PUT_LINE(AVG_PRICE_INVOICELINE_ITEMS);
END;







-- 3.4

CREATE OR REPLACE FUNCTION GET_YOUNGER_EMPLOYEES
RETURN SYS_REFCURSOR
IS 
MY_CURSOR SYS_REFCURSOR;
BEGIN
    OPEN MY_CURSOR FOR
    SELECT FIRSTNAME, LASTNAME FROM CHINOOK.EMPLOYEE WHERE CHINOOK.EMPLOYEE.BIRTHDATE >= DATE '1968-1-1';
    RETURN MY_CURSOR;
END;
/

DECLARE
    MY_CURSOR SYS_REFCURSOR;
    FIRSTNAME CHINOOK.EMPLOYEE.FIRSTNAME%TYPE;
    LASTNAME CHINOOK.EMPLOYEE.LASTNAME%TYPE;
BEGIN
    MY_CURSOR := GET_YOUNGER_EMPLOYEES;
    DBMS_OUTPUT.PUT_LINE('The following employees were born after 1968:');
    LOOP
        FETCH MY_CURSOR INTO FIRSTNAME,LASTNAME;
        EXIT WHEN MY_CURSOR%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(FIRSTNAME|| ' '||LASTNAME);
    END LOOP;
    CLOSE MY_CURSOR;
END;
/







-- 4.1
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE GET_EMPLOYEE_NAMES(S OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN S FOR
    SELECT FIRSTNAME, LASTNAME FROM CHINOOK.EMPLOYEE;
END;
/

DECLARE
    SVAR SYS_REFCURSOR;
    FIRSTNAME CHINOOK.EMPLOYEE.FIRSTNAME%TYPE;
    LASTNAME CHINOOK.EMPLOYEE.LASTNAME%TYPE;
BEGIN
    GET_EMPLOYEE_NAMES(SVAR);
    LOOP
        FETCH SVAR INTO FIRSTNAME, LASTNAME;
        EXIT WHEN SVAR%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(FIRSTNAME || ' ' || LASTNAME);
    END LOOP;
    CLOSE SVAR;
END;







-- 4.2 Part 1

CREATE OR REPLACE PROCEDURE CHINOOK.UPDATE_EMPLOYEE(ID IN CHINOOK.EMPLOYEE.EMPLOYEEID%TYPE , NEWPHONE IN CHINOOK.EMPLOYEE.PHONE%TYPE)
IS
BEGIN
    UPDATE CHINOOK.EMPLOYEE
    SET PHONE=NEWPHONE
    WHERE EMPLOYEEID = ID;
END;
/

BEGIN
    CHINOOK.UPDATE_EMPLOYEE(9,'(123)456-7890');
END;






-- 4.2 Part 2
CREATE OR REPLACE PROCEDURE GET_MANAGER(ID IN CHINOOK.EMPLOYEE.EMPLOYEEID%TYPE, S OUT SYS_REFCURSOR)
IS
BEGIN
   OPEN S FOR
   SELECT EMP2.FIRSTNAME, EMP2.LASTNAME
    FROM CHINOOK.EMPLOYEE EMP1, CHINOOK.EMPLOYEE EMP2
    WHERE EMP1.REPORTSTO = EMP2.EMPLOYEEID AND EMP1.EMPLOYEEID=ID; 
END;
/

DECLARE
    SVAR SYS_REFCURSOR;
    FIRSTNAME CHINOOK.EMPLOYEE.FIRSTNAME%TYPE;
    LASTNAME CHINOOK.EMPLOYEE.LASTNAME%TYPE;
BEGIN
    GET_MANAGER(5,SVAR);
    LOOP
        FETCH SVAR INTO FIRSTNAME, LASTNAME;
        EXIT WHEN SVAR%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(FIRSTNAME || ' ' || LASTNAME);
    END LOOP;
    CLOSE SVAR;
END;







-- 4.3

CREATE OR REPLACE PROCEDURE GET_CUSTOMER_INFO(ID IN CHINOOK.CUSTOMER.CUSTOMERID%TYPE, C_FIRSTNAME OUT CHINOOK.CUSTOMER.FIRSTNAME%TYPE, C_LASTNAME OUT CHINOOK.CUSTOMER.LASTNAME%TYPE, C_COMPANY OUT CHINOOK.CUSTOMER.COMPANY%TYPE )
IS
BEGIN
    SELECT FIRSTNAME, LASTNAME, COMPANY INTO C_FIRSTNAME, C_LASTNAME, C_COMPANY
    FROM CHINOOK.CUSTOMER
    WHERE CHINOOK.CUSTOMER.CUSTOMERID=ID;
END;
/

DECLARE
    FIRSTNAME CHINOOK.CUSTOMER.FIRSTNAME%TYPE;
    LASTNAME  CHINOOK.CUSTOMER.LASTNAME%TYPE;
    COMPANY  CHINOOK.CUSTOMER.COMPANY%TYPE;
BEGIN
    GET_CUSTOMER_INFO(1,FIRSTNAME,LASTNAME,COMPANY);
    DBMS_OUTPUT.PUT_LINE(FIRSTNAME || ' ' || LASTNAME || ' ' || COMPANY);
END;






-- 5.0 Part 1

DECLARE
    INVOICE_ID CHINOOK.INVOICE.INVOICEID%TYPE := 324; 
BEGIN
    SAVEPOINT before_delete;
    DELETE FROM CHINOOK.INVOICE
    WHERE INVOICEID = INVOICE_ID;
EXCEPTION
    WHEN others THEN
        ROLLBACK TO before_delete;
END;

COMMIT;
/






-- 5.0 Part 2

CREATE OR REPLACE PROCEDURE CHINOOK.CREATE_CUSTOMER(CUSTOMERID CHINOOK.CUSTOMER.CUSTOMERID%TYPE, FIRSTNAME CHINOOK.CUSTOMER.FIRSTNAME%TYPE, 
                                            LASTNAME CHINOOK.CUSTOMER.LASTNAME%TYPE, COMPANY CHINOOK.CUSTOMER.COMPANY%TYPE,
                                            ADDRESS CHINOOK.CUSTOMER.ADDRESS%TYPE, CITY CHINOOK.CUSTOMER.CITY%TYPE,
                                            STATE CHINOOK.CUSTOMER.STATE%TYPE, COUNTRY CHINOOK.CUSTOMER.COUNTRY%TYPE,
                                            POSTALCODE CHINOOK.CUSTOMER.POSTALCODE%TYPE, PHONE CHINOOK.CUSTOMER.PHONE%TYPE,
                                            FAX CHINOOK.CUSTOMER.FAX%TYPE, EMAIL CHINOOK.CUSTOMER.EMAIL%TYPE,
                                            SUPPORTREPID CHINOOK.CUSTOMER.SUPPORTREPID%TYPE
                                            )
IS
BEGIN
    SAVEPOINT before_insert;
    INSERT INTO CHINOOK.CUSTOMER VALUES(CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY, ADDRESS, CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL, SUPPORTREPID);
    DBMS_OUTPUT.PUT_LINE('success');
    COMMIT;
EXCEPTION
    WHEN others THEN
        ROLLBACK TO before_insert;
END;
/

BEGIN
    CHINOOK.CREATE_CUSTOMER(62,'Bob','McGee',null,'55 Main Street','Chicago','IL','USA',33333,'(555)555-5555',null,'bob.mcgee@gmail.com',5);
END;







-- 6.1 Part 1
CREATE OR REPLACE TRIGGER INSERT_EMPLOYEE_TRIGGER
AFTER INSERT ON CHINOOK.EMPLOYEE
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('Inserted an employee.');
END;
/








-- 6.1 Part 2

CREATE OR REPLACE TRIGGER UPDATE_ALBUM_TRIGGER
AFTER UPDATE ON CHINOOK.ALBUM
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('Updated an album.');
END;
/














-- 6.1 Part 3

CREATE OR REPLACE TRIGGER DELETE_CUSTOMER_TRIGGER
AFTER DELETE ON CHINOOK.CUSTOMER
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('Deleted a customer.');
END;
/









-- 7.1

SELECT 
    CHINOOK.CUSTOMER.FIRSTNAME,
    CHINOOK.INVOICE.INVOICEID
FROM CHINOOK.CUSTOMER
INNER JOIN CHINOOK.INVOICE    
ON CHINOOK.CUSTOMER.CUSTOMERID = CHINOOK.INVOICE.CUSTOMERID; 










-- 7.2

SELECT 
    CHINOOK.CUSTOMER.CUSTOMERID,
    CHINOOK.CUSTOMER.FIRSTNAME,
    CHINOOK.CUSTOMER.LASTNAME,
    CHINOOK.INVOICE.INVOICEID,
    CHINOOK.INVOICE.TOTAL
FROM CHINOOK.CUSTOMER
FULL OUTER JOIN CHINOOK.INVOICE    
ON CHINOOK.CUSTOMER.CUSTOMERID = CHINOOK.INVOICE.CUSTOMERID; 








-- 7.3

SELECT NAME, TITLE
FROM CHINOOK.ALBUM
RIGHT JOIN CHINOOK.ARTIST
ON CHINOOK.ARTIST.ARTISTID=CHINOOK.ALBUM.ARTISTID;







-- 7.4

SELECT NAME
FROM CHINOOK.ALBUM
CROSS JOIN CHINOOK.ARTIST
ORDER BY NAME;










-- 7.5

SELECT A.FIRSTNAME, A.LASTNAME, B.FIRSTNAME, B.LASTNAME
FROM CHINOOK.EMPLOYEE A, CHINOOK.EMPLOYEE B
WHERE A.REPORTSTO=B.EMPLOYEEID;