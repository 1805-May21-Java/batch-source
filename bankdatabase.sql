-- CREATE TABLES
CREATE TABLE ACCOUNTS (USER_ID NUMBER, USER_NAME VARCHAR2(25) NOT NULL, PASS VARCHAR2(25) NOT NULL);

CREATE TABLE BANK_ACCOUNTS (ACC_NUM NUMBER, ACC_TYPE VARCHAR2(8),BALANCE NUMBER);
ALTER TABLE BANK_ACCOUNTS ADD USER_ID NUMBER NOT NULL;


-- CREATE PRIMARY KEYS FOR TABLES
ALTER TABLE ACCOUNTS ADD CONSTRAINT PK_ACCOUNTS PRIMARY KEY(USER_ID);

ALTER TABLE BANK_ACCOUNTS ADD CONSTRAINT PK_BANK_ACCOUNTS PRIMARY KEY(ACC_NUM);

-- IDENTIFY FORIEGN KEYS
ALTER TABLE BANK_ACCOUNTS ADD CONSTRAINT FK_BANK_ACCOUNTS_USER_ID FOREIGN KEY(USER_ID) REFERENCES ACCOUNTS ON DELETE CASCADE;

-- ADD SEQUENCES
CREATE SEQUENCE SQ_ACCOUNTS_PK
START WITH 1
INCREMENT BY 1;

DROP SEQUENCE SQ_ACCOUNTS_PK;

commit;

-- ADD TRIGGERS TO AUTOMATICALLY INCREMENT PRIMARY KEYS
CREATE OR REPLACE TRIGGER TR_INSERT_ACCOUNTS
BEFORE INSERT ON ACCOUNTS
FOR EACH ROW
BEGIN
    SELECT SQ_ACCOUNTS_PK.NEXTVAL INTO :NEW.USER_ID FROM DUAL;
END;

-- ADD FUNCTIONS
CREATE OR REPLACE FUNCTION NEW_ACC_NUM
RETURN NUMBER
IS
NUM NUMBER;
EXIST VARCHAR2(5);
BEGIN
    LOOP
        NUM:= ROUND(DBMS_RANDOM.VALUE(0,1)*1000000000);
        
        SELECT CASE WHEN NOT EXISTS (SELECT 1 FROM BANK_ACCOUNTS) THEN 'FALSE' WHEN NUM NOT IN(SELECT ACC_NUM FROM BANK_ACCOUNTS) THEN 'FALSE' ELSE 'TRUE' END INTO EXIST FROM DUAL;
        
        IF(EXIST=NULL) THEN
            EXIST:='FALSE';
        END IF;
        
        EXIT WHEN EXIST='FALSE';
        
    END LOOP;
    
    RETURN(NUM);
    
END;


-- ADD PROCEDURES
-- CREATE A NEW CHECKING ACCOUNT
CREATE OR REPLACE PROCEDURE NEW_CHECKING(USER_ID NUMBER, DEPOSIT NUMBER)
IS
USER_HAS_CHECKING BOOLEAN;
NEXT_NUM NUMBER;
HOLD NUMBER;
BEGIN

    USER_HAS_CHECKING:=HAS_CHECKING(USER_ID);
    
    IF(USER_HAS_CHECKING=FALSE) THEN  
        HOLD:=DEPOSIT+100;
    ELSE
        HOLD:=DEPOSIT;
    END IF;
    
    NEXT_NUM:=NEW_ACC_NUM;
    
    INSERT INTO BANK_ACCOUNTS VALUES(NEXT_NUM,'CHECKING',HOLD, USER_ID);
END;

-- CREATE A NEW SAVINGS ACCOUNT
CREATE OR REPLACE PROCEDURE NEW_SAVINGS(USER_ID NUMBER, DEPOSIT NUMBER)
IS
NEXT_NUM NUMBER;
BEGIN

    NEXT_NUM:=NEW_ACC_NUM;
    
    INSERT INTO BANK_ACCOUNTS VALUES(NEXT_NUM, 'SAVINGS', DEPOSIT, USER_ID);
END;

set serveroutput on;

DELETE FROM ACCOUNTS;
commit;